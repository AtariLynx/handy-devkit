Epyx HandyAsm 1.12      mikey                           11-Apr-12509:20:07 Page    1
                                                        09:20:07  

    1                   * ====================================================
    2                   
    3                   	.LIST OFF
    7                   	.LIST ON
    8                   
    9                   * ====================================================
   10                   
   11      0033         SIZEKEY			.EQ 51
   12                   
   13      0200         BASE_ORG		.EQ $0200
   14      5000         WORK_ORG		.EQ $5000
   15                   
   16      FE00         SETCARTBLOCK	.EQ $FE00
   17      FE4A         RSA_LOAD		.EQ $FE4A
   18                   
   19      AEC1         DISP			.EQ $FEC1-WORK_ORG
   20                   
   21                   * ====================================================
   22                   * ===                       ==========================
   23                   * ===  Zero-Page Variables  ==========================
   24                   * ===                       ==========================
   25                   * ====================================================
   26                   
   27 FFFE:             		.OR $0000
   28                   
   29                   * - - - - - - - - - - - - - - - - - - - - - - - - - - 
   30                   * - - - - - - - - - - - - - - - - - - - - - - - - - - 
   31                   * - - - - - - - - - - - - - - - - - - - - - - - - - - 
   32                   * These are the variables as declared by the Mikey ROM
   33                   
   34                   * Note!  dest is presumed to be at memory location zer
   35 0000:             dest		.DS	2
   36                   
   37 0002:             checksum	.ds 1		; checksum used during decryption
   38                   
   39 0003:             powerdowncount	.DS 2
   40                   
   41 0005:             ptr		.ds 2
   42 0007:             num_blocks	.ds 1
   43                   
   44 0008:             bitcount	.DS 1		; temporary counter
   45 0009:             bytecount	.DS 1		; temporary counter
   46 000A:             temp0		.DS 1
   47 000B:             acc0		.DS 2		; accumulator pointers
   48 000D:             acc1		.DS 2
   49 000F:             input1		.DS 2		; pointer to multiplicand
   50 0011:             scratch0	.DS SIZEKEY	; scratch areas must be in zero p
   51 0044:             scratch1	.DS SIZEKEY
   52 0077:             scratch2	.DS SIZEKEY
   53 00AA:             inputcode	.DS SIZEKEY
   54      00AA         encrypted_area	.EQ inputcode
   55                   
   56                   * - - - - - - - - - - - - - - - - - - - - - - - - - - 
   57                   * - - - - - - - - - - - - - - - - - - - - - - - - - - 
   58                   * - - - - - - - - - - - - - - - - - - - - - - - - - - 
   59                   
   60                   * ====================================================
   61                   * ====================================================
Epyx HandyAsm 1.12      mikey                           11-Apr-12509:20:07 Page    2
                                                        09:20:07  

   62                   
   63                   	#MACRO ECHO_VALUE
   64 MACRO             		.ECHO "Value of ?0 is ?%d0 ($?%x0)"
   65                   	#ENDMACRO
   66                   
   67                   
   68                   * ====================================================
   69                   * ====================================================
   70                   
   71 00DD:             		.OR $fe00
   72                   		.RU *
   73                   
   74 FE00:             SetCartBlock
   75                   		; Fill shift register for cartridge (in A)
   76 FE00:38           		SEC				; Marker bit to detect end of shifting
   77 FE01:80 **        		BRA .0
   78 FE03:90 **        .1		BCC .2
   79 FE05:8E 8B FD     		STX IODAT		; When C set, set bit for shifting to 1 
   80 FE08:18           		CLC
   81 FE09:E8           .2		INX 			; 0th bit now 1 to strobe
   82 FE0A:8E 87 FD     		STX SYSCTL1
   83 FE0D:A2 02        .0		LDX #CART_ADDR_DATA	; Zero for 0th bit is relevant
   84 FE0F:8E 87 FD     		STX SYSCTL1		; Power on 
   85 FE12:2A           		ROL A
   86 FE13:9C 8B FD     		STZ IODAT		; Zero for bit to shift into register
   87 FE16:D0 EB        		BNE .1
   88 FE18:60           		RTS				; Back to decryption routine
   89                   
   90                   		; Clear all memory from $0003 to $FFFF to 0x00
   91 FE19:             ClearMemory
   92 FE19:64 01        		STZ dest+1				
   93 FE1B:A9 00        		LDA #$00
   94 FE1D:91 00        .3		STA (dest),y
   95 FE1F:C8           		INY
   96 FE20:D0 FB        		BNE .3
   97 FE22:E6 01        		INC dest+1
   98 FE24:D0 F7        		BNE .3
   99                   
  100                   		; Routine to initialize Mikey
  101 FE26:             InitMikey
  102 FE26:A2 **        		LDX #MIKEYVALS_COUNT			
  103 FE28:BD ** **     .4		LDA MikeyValues-1,x
  104 FE2B:BC ** **     		LDY MikeyOffsets-1,x
  105 FE2E:99 00 FD     		STA MIKEY_BASE,y
  106 FE31:CA           		DEX
  107 FE32:D0 F4        		BNE .4
  108                   
  109                   ; Copy 256 bytes from $FEC1 to $5000
  110 FE34:BD ** **     copy	LDA Decrypt,x
  111 FE37:9D 00 50     		STA WORK_ORG,x
  112 FE3A:E8           		INX
  113 FE3B:D0 F7        		BNE copy
  114                   
  115                   ; Start decryption process for first frame
  116 FE3D:64 05        		STZ ptr			; Destination address of decrypted data (l
  117 FE3F:A9 02        		LDA #2
  118 FE41:85 06        		STA ptr+1		; Destination address of decrypted data (
  119 FE43:64 02        		STZ checksum	; Initialize transition byte
  120 FE45:A9 00        		LDA #0			; Prepare for first block
Epyx HandyAsm 1.12      mikey                           11-Apr-12509:20:07 Page    3
                                                        09:20:07  

  121 FE47:20 00 FE     		JSR SetCartBlock
  122                   
  123 FE4A:AD B2 FC     		LDA RCART_0		; Read cart (using strobe CART0)
  124 FE4D:C9 FB        		CMP #$FB		; First byte has two's complement of numbe
  125 FE4F:90 **        		BCC retry		; If value is less than #$FB it is not a 
  126 FE51:85 07        		STA num_blocks	; Save block count
  127 FE53:9C AF FD     		STZ GREENF		; GREENF = 0
  128 FE56:9C BF FD     		STZ BLUEREDF	; BLUEREDF = 0
  129                   
  130                   ; Read entire block of encrypted data (reversed)
  131 FE59:             ReadBlock
  132 FE59:A2 32        		LDX #SIZEKEY-1	; Each block in a frame is 50 + 1 byt
  133 FE5B:AD B2 FC     .5		LDA RCART_0		; Read cart (using strobe CART0)
  134 FE5E:95 AA        		STA inputcode,x	; Store block data in ZP from $AA to
  135 FE60:CA           		DEX
  136 FE61:10 F8        		BPL .5		; Next byte
  137                   
  138                   ; Decrypt current block
  139 FE63:05 AB        		ORA inputcode+1	; Accumulator contains last byte of 
  140 FE65:05 AC        		ORA inputcode+2
  141 FE67:F0 **        		BEQ retry		; First three bytes should contain at lea
  142 FE69:A2 02        		LDX #$02		; Start at position 2
  143 FE6B:B5 AA        .8		LDA inputcode,x	; Read value
  144 FE6D:FD ** **     		SBC modulus,x	; Subtract with public part of encrypt
  145 FE70:CA           		DEX
  146 FE71:10 F8        		BPL .8			; Next value
  147 FE73:B0 **        		BCS retry		; If sanity check fails go to error
  148 FE75:20 00 50     		JSR WORK_ORG	; Start decryption (plaintext = encrypt
  149 FE78:B2 0B        		LDA (acc0)		; Sanity check for contents of decrypted
  150 FE7A:C9 15        		CMP #$15		; Must always be $15 as hardcoded marker b
  151 FE7C:D0 **        		BNE retry		; On error
  152                   
  153 FE7E:A5 02        		LDA checksum	; Get transition byte between blocks
  154 FE80:A0 32        		LDY #SIZEKEY-1	; Start at end of decrypted data
  155 FE82:18           .9		CLC
  156 FE83:71 0B        		ADC (acc0),y	; A += decrypted data
  157 FE85:92 05        		STA (ptr)		; Store at destination address ($0200) an
  158 FE87:E6 05        		INC ptr			; Update destination
  159 FE89:88           		DEY				; Next byte
  160 FE8A:D0 F6        		BNE .9			; Until all data in block is done
  161 FE8C:85 02        		STA checksum	; Remember last byte
  162 FE8E:E6 07        		INC num_blocks	; Next block
  163 FE90:D0 C7        		BNE ReadBlock	; Continue reading next block of data 
  164 FE92:A0 02        		LDY #CART_POWER_OFF
  165 FE94:8C 8B FD     		STY IODAT		; Set cart address data
  166 FE97:AA           		TAX
  167 FE98:D0 **        		BNE retry		; On error retry
  168 FE9A:4C 00 02     		JMP BASE_ORG	; Run whatever is at $0200
  169                   
  170                   ; Retry lots of times
  171 FE9D:             retry
  172 FE9D:E6 03        		INC powerdowncount			
  173 FE9F:D0 **        		BNE InitSuzy
  174 FEA1:E6 04        		INC powerdowncount+1
  175 FEA3:D0 **        		BNE InitSuzy
  176 FEA5:9C 87 FD     		STZ SYSCTL1		; Power down console
  177 FEA8:80 FE        .6		BRA .6			; Give up and loop forever 
  178                   
  179                   ; Initialize Suzy
Epyx HandyAsm 1.12      mikey                           11-Apr-12509:20:07 Page    4
                                                        09:20:07  

  180 FEAA:             InitSuzy
  181 FEAA:A2 **        		LDX #SUZYVALS_COUNT-1
  182 FEAC:BD ** **     .7		LDA SuzyValues,x
  183 FEAF:BC ** **     		LDY SuzyOffsets,x
  184 FEB2:99 00 FC     		STA SUZY_BASE,y
  185 FEB5:CA           		DEX
  186 FEB6:10 F4        		BPL .7
  187 FEB8:9C 91 FD     		STZ CPUSLEEP	; Reset CPU bus request flip flop (draw
  188 FEBB:9C 90 FD     		STZ SDONEACK	; Clear SDONEACK
  189 FEBE:4C 26 FE     		JMP InitMikey	; Call routine to initialize Mikey
  190                   
  191 FEC1:             Decrypt
  192 FEC1:A9 11        		LDA #<scratch0
  193 FEC3:85 0B        		STA acc0		; Pointer to start of zero page temporary 
  194 FEC5:A9 44        		LDA #<scratch1	; End of working data zero page addre
  195 FEC7:8D 71 50     		STA $5071		; Self-modifying code (see FF32)
  196 FECA:A9 AA        		LDA #<inputcode
  197 FECC:85 0F        		STA input1		; Pointer to start of encrypted data in 
  198 FECE:20 18 50     		JSR $5018		; Currently FED9: perform first multiplic
  199 FED1:A5 0B        		LDA acc0		; Transfer pointer to data with enc^2 ...
  200 FED3:85 0F        		STA input1		; ... to encryption data
  201 FED5:A9 77        		LDA #<scratch2	; Set pointer for work data right aft
  202 FED7:85 0B        		STA acc0		; Perform second multiplication of enc * e
  203                   
  204                   ; Clear all 51 values of temporary work data
  205 FED9:A0 32        		LDY #SIZEKEY-1		
  206 FEDB:A9 00        		LDA #0
  207 FEDD:91 0B        .10		STA (acc0),y
  208 FEDF:88           		DEY
  209 FEE0:10 FB        		BPL .10
  210                   
  211                   ; Montgomery multiplication algorithm
  212 FEE2:C8           		INY				; Y = 0
  213 FEE3:B1 0F        .19		LDA (input1),y	; Load value from encrypted data (
  214 FEE5:85 0A        		STA temp0		; Store in work variable
  215 FEE7:C6 08        		DEC bitcount
  216 FEE9:A5 0B        .20		LDA acc0		; Change data address to work on
  217 FEEB:8D 37 50     		STA $5037		; Self-modifying code (see FEF7)
  218 FEEE:8D 43 50     		STA $5043		; Self-modifying code (see FF04)
  219 FEF1:8D 47 50     		STA $5047		; Self-modifying code (see FF08)
  220 FEF4:18           		CLC
  221 FEF5:A2 32        		LDX #SIZEKEY-1
  222 FEF7:36 00        		ROL $00,x		; Operand corresponds to $5037
  223 FEF9:CA           		DEX
  224 FEFA:10 FB        		BPL $FEF7
  225 FEFC:06 0A        		ASL $0A
  226 FEFE:90 11        		BCC $FF11
  227 FF00:A2 32        		LDX #$32
  228 FF02:18           		CLC
  229 FF03:B5 00        .21		LDA dest,x		; Operand corresponds to $5043
  230 FF05:75 AA        		ADC inputcode,x
  231 FF07:95 00        		STA dest,x		; Operand corresponds to $5047
  232 FF09:CA           		DEX
  233 FF0A:10 F7        		BPL .21
  234 FF0C:20 5D 50      		JSR $505D		; Call reduce method
  235 FF0F:90 **        		BCC .22
  236 FF11:20 5D 50     		JSR $505D		; Call reduce method
  237 FF14:46 08        .22		LSR $08
  238 FF16:D0 D1        		BNE .20
Epyx HandyAsm 1.12      mikey                           11-Apr-12509:20:07 Page    5
                                                        09:20:07  

  239 FF18:C8           		INY
  240 FF19:C0 33        		CPY #SIZEKEY
  241 FF1B:90 C6        		BCC .19
  242 FF1D:60           		RTS				; scratch0 + scratch1 contains enc^2 at first
  243                   
  244 FF1E:             MontgomeryReduce
  245 FF1E:A5 0B        		LDA acc0
  246 FF20:8D 6C 50     		STA $506C
  247 FF23:B2 0B        		LDA (acc0)
  248 FF25:CD ** **     		CMP modulus		; Start of public part of encryption ke
  249 FF28:90 **        		BCC done
  250 FF2A:A2 32        		LDX #SIZEKEY-1
  251 FF2C:B5 00        .30		LDA dest,x
  252 FF2E:FD ** **     		SBC modulus,x	; Subtract from corresponding byte in 
  253 FF31:95 00        		STA dest,x		; Operand corresponds to $5071 when copi
  254 FF33:CA           		DEX
  255 FF34:10 F6        		BPL .30
  256 FF36:90 **        		BCC done
  257 FF38:A5 0B        		LDA acc0
  258 FF3A:AE 71 50     		LDX $5071
  259 FF3D:86 0B        		STX acc0		; Update pointer to work data
  260 FF3F:8D 71 50     		STA $5071		; Self-modify code
  261 FF42:             done
  262 FF42:60           		RTS
  263                   
  264                   		; SCB data for INSERT GAME sprite
  265 FF43:05           		.BYTE $05		; SPRCTLO (1 bit/pixel, no flipping, non-
  266 FF44:93           		.BYTE $93		; SPRCTL1 (Totally literal, HSIZE and VSI
  267 FF45:00           		.BYTE $00		; SPRCOLL
  268 FF46:00 00        		.WORD $0000		; Address of next SCB
  269 FF48:92 50        		.WORD $5092		; Address of SPRDLINE (sprite data)
  270 FF4A:80 00        		.WORD $0080		; HPOSSTRT 128
  271 FF4C:48 00        		.WORD $0048		; VPOSSTRT 72
  272 FF4E:00 04        		.WORD $0400		; HSIZE (magnify by 4 horizontally)
  273 FF50:00 04        		.WORD $0400		; VSIZE (magnify by 4 vertically)
  274 FF52:F0           		.BYTE $F0		; Palette colors
  275                   
  276                   ; Sprite data (INSERT GAME upside down)
  277 FF53:04 E2 EA 87  		.BYTE $04, $E2, $EA, $87		; ...000.0...0.0.0.0000...
  277                   
  278 FF57:04 FA AA B7  		.BYTE $04, $FA, $AA, $B7 		; .....0.0.0.0.0.0.0..0..
  278                   
  279 FF5B:04 F2 08 97  		.BYTE $04, $F2, $08, $97 		; ....00.00000.000.00.0..
  279                   
  280 FF5F:04 FA 4A F7  		.BYTE $04, $FA, $4A, $F7		; .....0.00.00.0.0....0...
  280                   
  281 FF63:04 E2 E8 87  		.BYTE $04, $E2, $E8, $87		; ...000.0...0.000.0000...
  281                   
  282 FF67:02 FF        		.BYTE $02, $FF					; ........
  283 FF69:05 B5 11 68  		.BYTE $05, $B5, $11, $68, $FF	; .0..0.0.000.000.0..0
  283      FF           
  284 FF6E:04 B5 D7 2D  		.BYTE $04, $B5, $D7, $2D		; .0..0.0...0.0...00.0..0.
  284                   
  285 FF72:04 B9 91 0D  		.BYTE $04, $B9, $91, $0D		; .0...00..00.000.0000..0.
  285                   
  286 FF76:04 B5 DD 4D  		.BYTE $04, $B5, $DD, $4D		; .0..0.0...0...0.0.00..0.
  286                   
  287 FF7A:05 19 11 68  		.BYTE $05, $19, $11, $68, $FF	; 000..00.000.000.0..0
  287      FF           
Epyx HandyAsm 1.12      mikey                           11-Apr-12509:20:07 Page    6
                                                        09:20:07  

  288 FF7F:00           		.BYTE $00						;$ End of quadrant
  289                   
  290                   ; Start of boot sequence
  291 FF80:AD 88 FC     		LDA SUZYHREV	; Load hardware version (always 1.0 for
  292 FF83:F0 7B        		BEQ $0000		
  293 FF85:68           		PLA
  294 FF86:68           		PLA
  295 FF87:68           		PLA
  296 FF88:68           		PLA
  297 FF89:A0 02        		LDY #CART_POWER_OFF
  298 FF8B:8C 8B FD     		STY IODAT		; Set cartridge power off
  299 FF8E:C8           		INY
  300 FF8F:8C 8A FD     		STY IODIR		; External power and cart address to outp
  301 FF92:8C F9 FF     		STY MAPCTL		; Memory map to 03 (Mikey and Suzy addre
  302 FF95:64 00        		STZ $00			; Set $0000 to 0
  303 FF97:4C 19 FE     		JMP ClearMemory
  304                   
  305                   * ====================================================
  306                   * ====================================================
  307                   
  308 FF9A:             		.ORG $FF9A
  309                   
  310                   ; Public key modulus for decryption
  311 FF9A:             modulus
  312 FF9A:35 B5 A3 94  		.BYTE $35, $B5, $A3, $94, $28, $06, $D8, $A2
  312      28 06 D8 A2  
  312                   
  313 FFA2:26 95 D7 71  		.BYTE $26, $95, $D7, $71, $B2, $3C, $FD, $56
  313      B2 3C FD 56  
  313                   
  314 FFAA:1C 4A 19 B6  		.BYTE $1C, $4A, $19, $B6, $A3, $B0, $26, $00
  314      A3 B0 26 00  
  314                   
  315 FFB2:36 5A 30 6E  		.BYTE $36, $5A, $30, $6E, $3C, $4D, $63, $38
  315      3C 4D 63 38  
  315                   
  316 FFBA:1B D4 1C 13  		.BYTE $1B, $D4, $1C, $13, $64, $89, $36, $4C
  316      64 89 36 4C  
  316                   
  317 FFC2:F2 BA 2A 58  		.BYTE $F2, $BA, $2A, $58, $F4, $FE, $E1, $FD
  317      F4 FE E1 FD  
  317                   
  318 FFCA:AC 7E 79     		.BYTE $AC, $7E, $79
  319                   
  320                   
  321 FFCD:             MikeyOffsets
  322                   ; Mikey addresses to be initialized (add to Mikey rang
  323 FFCD:90           		.BYTE $90	; SDONEACK
  324 FFCE:92           		.BYTE $92	; DISPCTL
  325 FFCF:95           		.BYTE $95	; DISPADRH
  326 FFD0:94           		.BYTE $94	; DISPADRL
  327 FFD1:93           		.BYTE $93	; PBCKUP
  328 FFD2:09           		.BYTE $09	; TIM2CTLA
  329 FFD3:08           		.BYTE $08	; TIM2BCKUP
  330 FFD4:BF           		.BYTE $BF	; BLUEREDF
  331 FFD5:AF           		.BYTE $AF	; GREENF
  332 FFD6:B0           		.BYTE $B0	; BLUERED0
  333 FFD7:A0           		.BYTE $A0	; GREEN0
  334 FFD8:01           		.BYTE $01	; TIM0CTLA
Epyx HandyAsm 1.12      mikey                           11-Apr-12509:20:07 Page    7
                                                        09:20:07  

  335                   ;		.BYTE $00	; TIM0BCKUP
  336                   
  337                   ; Initialization values for Mikey addresses
  338 FFD9:             MikeyValues
  339 FFD9:00           		.BYTE $00	; Render sprite command (and also address 
  340 FFDA:0D           		.BYTE $0D	; 4 bit color with video DMA enabled
  341 FFDB:20           		.BYTE $20	; Video address at $2000
  342 FFDC:00           		.BYTE $00	; Video address at $2000
  343 FFDD:29           		.BYTE $29	; Magic P value for screen frequency
  344 FFDE:1F           		.BYTE $1F	; Enable count and reload, linking
  345 FFDF:68           		.BYTE $68	; 104 backup value for vertical scan timer
  346 FFE0:3E           		.BYTE $3E	; Yellow
  347 FFE1:0E           		.BYTE $0E	; Yellow
  348 FFE2:00           		.BYTE $00	; Black
  349 FFE3:00           		.BYTE $00	; Black	
  350 FFE4:18           		.BYTE $18	; 2 microseconds timing for horizontal lin
  351 FFE5:9E           		.BYTE $9E	; 158 backup value for horizontal line sca
  352                   
  353      000D         MIKEYVALS_COUNT	.EQ *-MikeyValues	; number of values t
  354                   
  355                   ; Suzy addresses to be initialized (add to Suzy range 
  356 FFE6:             SuzyOffsets
  357 FFE6:91           		.BYTE $91	; SPRGO
  358 FFE7:11           		.BYTE $11	; SCBNEXTH
  359 FFE8:10           		.BYTE $10	; SCBNEXTL
  360 FFE9:09           		.BYTE $09	; VIDBASH
  361 FFEA:08           		.BYTE $08	; VIDBASL
  362 FFEB:06           		.BYTE $06	; VOFFL
  363 FFEC:04           		.BYTE $04	; HOFFL
  364 FFED:90           		.BYTE $90	; SUZYBUSEN
  365 FFEE:92           		.BYTE $92	; SPRSYS
  366                   
  367                   ; Initialization values for Suzy addresses (see also $
  368 FFEF:             SuzyValues
  369 FFEF:01           		.BYTE $01	; Draw sprite (no everon detection)
  370 FFF0:50           		.BYTE $50	; SCBNEXT = $5082
  371 FFF1:82           		.BYTE $82	; 
  372 FFF2:20           		.BYTE $20	; VIDBAS = $2000
  373 FFF3:00           		.BYTE $00	; 
  374 FFF4:00           		.BYTE $00	; VOFF = $0000
  375 FFF5:00           		.BYTE $00	; HOFF = $0000
  376 FFF6:01           		.BYTE $01	; Bus enabled
  377 FFF7:00           		.BYTE $00	; Unsigned math, no accumulation, collissi
  378                   
  379      0009         SUZYVALS_COUNT	.EQ *-SuzyValues	; number of values to 
  380                   
  381                   ; Reserved registers
  382 FFF8:00           		.BYTE $00	; Reserved
  383 FFF9:80           		.BYTE $80	; MAPCTL value
  384 FFFA:00 30        	 	.WORD $3000	; NMI vector
  385 FFFC:80 FF        	 	.WORD $FF80	; Boot vector
  386 FFFE:80 FF        		.WORD $FF80	; IRQ vector
  387                   
Epyx HandyAsm 1.12      Symbols                         11-Apr-12509:20:07 Page    8
                                                        09:20:07  

$0040 ACCUMULATE                        $0040 ALGO_3
$0000 ASM.EQUSYMS                       $010C ASM.VERSION
$FD40 ATTENREG0                         $FD41 ATTENREG1
$FD42 ATTENREG2                         $FD43 ATTENREG3
$FD86 AUDIN                             $0010 AUDIN_BIT
$FD20 AUDIO0                            $FD28 AUDIO1
$FD30 AUDIO2                            $FD38 AUDIO3
$0000 AUD_1                             $0004 AUD_16
$0001 AUD_2                             $0005 AUD_32
$0002 AUD_4                             $0006 AUD_64
$0003 AUD_8                             $0004 AUD_BACKUP
$0007 AUD_CLOCK_MASK                    $0005 AUD_CONTROL
$0006 AUD_COUNTER                       $0001 AUD_FEEDBACK
$0007 AUD_LINKING                       $0007 AUD_OTHER
$0002 AUD_OUTPUT                        $0003 AUD_SHIFT
$0000 AUD_VOLCNTRL                      $0001 A_BUTTON
$0000 BACKGROUND_SPRITE                 $0001 BACKNONCOLL_SPRITE
$0000 BACK_SHADOW_SPRITE                $0200 BASE_ORG
$00C0 BITS_MASK                         $FDB0 BLUERED0
$FDB1 BLUERED1                          $FDB2 BLUERED2
$FDB3 BLUERED3                          $FDB4 BLUERED4
$FDB5 BLUERED5                          $FDB6 BLUERED6
$FDB7 BLUERED7                          $FDB8 BLUERED8
$FDB9 BLUERED9                          $FDBA BLUEREDA
$FDBB BLUEREDB                          $FDBC BLUEREDC
$FDBD BLUEREDD                          $FDBE BLUEREDE
$FDBF BLUEREDF                          $0002 BORROW_IN
$0001 BORROW_OUT                        $0003 BOUNDARY_SPRITE
$0002 BSHADOW_SPRITE                    $0002 B_BUTTON
$0002 CART0_IO_INACTIVE                 $0004 CART1_IO_INACTIVE
$0002 CART_ADDR_DATA                    $0001 CART_ADDR_STROBE
$0002 CART_POWER_OFF                    $FC0F COLLADRH
$FC0E COLLADRL                          $FC0B COLLBASH
$FC0A COLLBASL                          $FC25 COLLOFFH
$FC24 COLLOFFL                          $FD91 CPUSLEEP
$FFFE CPU_IRQ                           $FFFA CPU_NMI
$FFFC CPU_RESET                         $FE19 ClearMemory
$AEC1 DISP                              $FD95 DISPADRH
$FD94 DISPADRL                          $FD92 DISPCTL
$1FE0 DISPLAY_BUFSIZE                   $0008 DISP_COLOR
$0002 DISP_FLIP                         $0004 DISP_FOURBIT
$0001 DMA_ENABLE                        $0001 DRAW_LEFT
$0002 DRAW_UP                           $FEC1 Decrypt
MACRO ECHO_VALUE                        $0008 ENABLE_COUNT
$0080 ENABLE_INT                        $0020 ENABLE_INTEGRATE
$0010 ENABLE_RELOAD                     $0004 EVER_ON
$0001 EXTERNAL_POWER                    $0080 FEEDBACK_7
$0004 FLIP_BUTTON                       $00C0 FOUR_PER_PIXEL
$0004 FRAMERR                           $FDA0 GREEN0
$FDA1 GREEN1                            $FDA2 GREEN2
$FDA3 GREEN3                            $FDA4 GREEN4
$FDA5 GREEN5                            $FDA6 GREEN6
$FDA7 GREEN7                            $FDA8 GREEN8
$FDA9 GREEN9                            $FDAA GREENA
$FDAB GREENB                            $FDAC GREENC
$FDAD GREEND                            $FDAE GREENE
$FDAF GREENF                            $FC00 HARDWARE_START
$FD00 HCOUNT                            $0020 HFLIP
Epyx HandyAsm 1.12      Symbols                         11-Apr-12509:20:07 Page    9
                                                        09:20:07  

$FC05 HOFFH                             $FC04 HOFFL
$0001 HORIZONTAL_INT                    $FCC4 HOWIE
$FC15 HPOSSTRTH                         $FC14 HPOSSTRTL
$FC29 HSIZOFFH                          $FC28 HSIZOFFL
$0002 INNER_BUTTON                      $FD80 INTRST
$FD81 INTSET                            $FD8B IODAT
$FD8A IODIR                             $FCC3 IOData
$FCC2 IOStatus                          $FE26 InitMikey
$FEAA InitSuzy                          $FCB0 JOYSTICK
$0080 JOY_DOWN                          $0010 JOY_LEFT
$0020 JOY_RIGHT                         $0040 JOY_UP
$0004 LAST_CLOCK                        $FCC0 LEDS
$0010 LEFT0_SELECT                      $0020 LEFT1_SELECT
$0040 LEFT2_SELECT                      $0080 LEFT3_SELECT
$0008 LEFTHAND                          $0008 LEFTHANDED
$00F0 LEFT_ATTENMASK                    $0080 LITERAL
$FFF9 MAPCTL                            $FC55 MATHA
$FC54 MATHB                             $FC53 MATHC
$0020 MATHCARRY                         $FC52 MATHD
$FC63 MATHE                             $FC62 MATHF
$FC61 MATHG                             $FC60 MATHH
$FC6F MATHJ                             $FC6E MATHK
$FC6D MATHL                             $FC6C MATHM
$FC57 MATHN                             $FC56 MATHP
$0040 MATHWARNING                       $0080 MATHWORKING
$FD88 MIKEYHREV                         $FD89 MIKEYSREV
$000D MIKEYVALS_COUNT                   $FD00 MIKEY_BASE
$0002 MIKEY_SPACE                       $FD44 MPAN
$FD50 MSTEREO                           $FD9C MTEST0
$FD9D MTEST1                            $FD9E MTEST2
$FFCD MikeyOffsets                      $FFD9 MikeyValues
$FF1E MontgomeryReduce                  $0004 NOEXP
$0005 NONCOLL_SPRITE                    $0004 NORMAL_SPRITE
$0020 NO_COLLIDE                        $0000 ONE_PER_PIXEL
$0008 OPTION1_BUTTON                    $0004 OPTION2_BUTTON
$0001 OUTER_BUTTON                      $0008 OVERRUN
$0001 PARBIT                            $0010 PAREN
$0010 PARERR                            $0001 PAREVEN
$0001 PAUSE_SWITCH                      $FD93 PBKUP
$0002 POWERON                           $FC2F PROCADRH
$FC2E PROCADRL                          $FCB2 RCART_0
$FCB3 RCART_1                           $0010 READ_ENABLE
$0010 RELOAD_HV                         $0020 RELOAD_HVS
$0030 RELOAD_HVST                       $0030 RELOAD_MASK
$0000 RELOAD_NONE                       $0008 RESETERR
$0040 RESET_DONE                        $0008 RESTART_BUTTON
$0008 RESTLESS                          $0008 REUSE_PALETTE
$0001 RIGHT0_SELECT                     $0002 RIGHT1_SELECT
$0004 RIGHT2_SELECT                     $0008 RIGHT3_SELECT
$000F RIGHT_ATTENMASK                   $0004 ROM_SPACE
$FE4A RSA_LOAD                          $0002 RXBRK
$0040 RXINTEN                           $0040 RXRDY
$FE59 ReadBlock                         $FC2D SCBADRH
$FC2C SCBADRL                           $FC11 SCBNEXTH
$FC10 SCBNEXTL                          $FC23 SCVPOSH
$FC22 SCVPOSL                           $FD90 SDONEACK
$FD8C SERCTL                            $FD8D SERDAT
$FD10 SERIALRATE                        $0010 SERIAL_INT
$FE00 SETCARTBLOCK                      $0007 SHADOW_SPRITE
Epyx HandyAsm 1.12      Symbols                         11-Apr-12509:20:07 Page   10
                                                        09:20:07  

$0080 SIGNMATH                          $0033 SIZEKEY
$0004 SKIP_SPRITE                       $FC82 SPRCOLL
$FC80 SPRCTL0                           $FC81 SPRCTL1
$FC13 SPRDLINEH                         $FC12 SPRDLINEL
$FC21 SPRDOFFH                          $FC20 SPRDOFFL
$FC91 SPRGO                             $FC19 SPRHSIZH
$FC18 SPRHSIZL                          $FC83 SPRINIT
$0002 SPRITESTOP                        $0002 SPRITETOSTOP
$0001 SPRITEWORKING                     $0001 SPRITE_GO
$FC92 SPRSYS                            $FC1B SPRVSIZH
$FC1A SPRVSIZL                          $FC1D STRETCHH
$FC1C STRETCHL                          $FC90 SUZYBUSEN
$FC88 SUZYHREV                          $FC89 SUZYSREV
$0009 SUZYVALS_COUNT                    $FC00 SUZY_BASE
$0001 SUZY_SPACE                        $FCB1 SWITCHES
$FD87 SYSCTL1                           $FE00 SetCartBlock
$FFE6 SuzyOffsets                       $FFEF SuzyValues
$0080 THREE_PER_PIXEL                   $FC03 TILTACUMH
$FC02 TILTACUML                         $FC1F TILTH
$FC1E TILTL                             $FD00 TIMER0
$0001 TIMER0_INT                        $FD04 TIMER1
$0002 TIMER1_INT                        $FD08 TIMER2
$0004 TIMER2_INT                        $FD0C TIMER3
$0008 TIMER3_INT                        $FD10 TIMER4
$FD14 TIMER5                            $0020 TIMER5_INT
$FD18 TIMER6                            $0040 TIMER6_INT
$FD1C TIMER7                            $0080 TIMER7_INT
$0008 TIMER_DONE                        $0000 TIM_BACKUP
$0001 TIM_CONTROLA                      $0003 TIM_CONTROLB
$0002 TIM_COUNT                         $FC01 TMPADRH
$FC00 TMPADRL                           $0080 TURBO_DISABLE
$0040 TWO_PER_PIXEL                     $0002 TXBRK
$0020 TXEMPTY                           $0080 TXINTEN
$0004 TXOPEN                            $0080 TXRDY
$0004 UNSAFEACCESS                      $0004 UNSAFEACCESSRST
$FD08 VCOUNT                            $0008 VECTOR_SPACE
$0004 VERTICAL_INT                      $0010 VFLIP
$FC0D VIDADRH                           $FC0C VIDADRL
$FC09 VIDBASH                           $FC08 VIDBASL
$FC07 VOFFH                             $FC06 VOFFL
$FC17 VPOSSTRTH                         $FC16 VPOSSTRTL
$FC27 VSIZACUMH                         $FC26 VSIZACUML
$FC2B VSIZOFFH                          $FC2A VSIZOFFL
$0010 VSTRETCH                          $0010 VSTRETCHING
$5000 WORK_ORG                          $0006 XOR_SHADOW_SPRITE
$0006 XOR_SPRITE                        $000B acc0
$000D acc1                              $0008 bitcount
$0009 bytecount                         $0002 checksum
$FE34 copy                              $0000 dest
$FF42 done                              $00AA encrypted_area
$000F input1                            $00AA inputcode
$FF9A modulus                           $0007 num_blocks
$0003 powerdowncount                    $0005 ptr
$FE9D retry                             $0011 scratch0
$0044 scratch1                          $0077 scratch2
$000A temp0                             
