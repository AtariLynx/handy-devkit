Epyx HandyAsm 1.12      monitor.src                     08-Apr-12516:32:34 Page    1
                                                        16:32:34  

    1                   * Research
    2                   * $FBEF (just above IRQ Jump table)
    3                   * $FBB9 (Version number? send as part of data request 
    4                   
    5                   * ====================================================
    6                   
    7                   	.LIST OFF
   12                   	.LIST ON
   13                   
   14      0001         BRK_USER        .EQ 1
   15                   
   16                   * ====================================================
   17                   
   18 FFFE:                     .ORG MONITOR_ZP_RESERVED
   19                   
   20 00F8:             dest        .DS 2       ; F8-F9
   21 00FA:             dest_old    .DS 2       ; FA-FB
   22                   
   23                   * ====================================================
   24                   
   25 00FC:                     .ORG MONITOR_RAM_RESERVED
   26                   
   27 F900:78                   SEI
   28 F901:D8                   CLD
   29 F902:A9 08                LDA #VECTOR_SPACE
   30 F904:8D ** **             STA MAPCTL_RAM
   31 F907:8D F9 FF             STA MAPCTL	
   32 F90A:A9 **                LDA #<NmiHandler            ; Set NMI vector t
   33 F90C:8D FA FF             STA CPU_NMI
   34 F90F:A9 **                LDA #>NmiHandler
   35 F911:8D FB FF             STA CPU_NMI+1
   36 F914:A9 **                LDA #<UserIntHandler            ; Set IRQ vect
   37 F916:8D FE FF             STA CPU_IRQ
   38 F919:A9 **                LDA #>UserIntHandler
   39 F91B:8D FF FF             STA CPU_IRQ+1
   40 F91E:A9 0A                LDA #RESTLESS+CART_POWER_OFF
   41 F920:8D 8B FD             STA IODAT
   42 F923:8D 8A FD             STA IODIR
   43 F926:8D ** **             STA IODAT_RAM
   44 F929:20 ** **             JSR Write0Page6		; Write zero to page 6 on RCA
   45 F92C:A9 04                LDA #TXOPEN
   46 F92E:8D 8C FD             STA SERCTL
   47                   
   48 F931:             NmiHandler      ; $F931
   49 F931:8D ** **             STA SaveA 		; Store accumulator, X and Y regis
   50 F934:8E ** **             STX SaveX
   51 F937:8C ** **             STY SaveY
   52 F93A:68                   PLA 			; Get PC, ReturnHi, ReturnLo from stack
   53 F93B:FA                   PLX
   54 F93C:7A                   PLY
   55 F93D:8D ** **             STA SavePS		; Store for inspection
   56 F940:8E ** **             STX SavePCHi
   57 F943:8C ** **             STY SavePCLo
   58 F946:BA                   TSX			; Store stack pointer 
   59 F947:8E ** **             STX SaveSP
   60                   
   61                   ; Silence all audio channels
   62 F94A:9C 20 FD             STZ AUDIO0+AUD_VOLCNTRL
Epyx HandyAsm 1.12      monitor.src                     08-Apr-12516:32:34 Page    2
                                                        16:32:34  

   63 F94D:9C 28 FD             STZ AUDIO1+AUD_VOLCNTRL
   64 F950:9C 30 FD             STZ AUDIO2+AUD_VOLCNTRL
   65 F953:9C 38 FD             STZ AUDIO3+AUD_VOLCNTRL
   66                   
   67 F956:20 ** **             JSR Ritual1
   68                   
   69 F959:             Main
   70 F959:20 ** **             JSR ReadByte        ; Read byte from parallel 
   71                   
   72 F95C:C9 01                CMP #DOWNLOAD_REQUEST ; Control command: 01 me
   73 F95E:D0 **                BNE .2
   74 F960:20 ** **             JSR Download		; Control loop for downloading f
   75 F963:80 F4                BRA Main		    ; Next command
   76                   
   77 F965:C9 02        .2      CMP #UPLOAD_REQUEST	; Control command: 02 mean
   78 F967:D0 **                BNE .5
   79 F969:20 ** **             JSR Upload          ; Control loop for uploadi
   80 F96C:4C 59 F9             JMP Main            ; Next command
   81                   
   82 F96F:C9 05        .5      CMP #GO_REQUEST		; Control command: 05 means "
   83 F971:D0 **                BNE .3              ; Check whether to return 
   84                   
   85 F973:A9 04                LDA #TXOPEN
   86 F975:8D 8C FD             STA SERCTL
   87                   
   88                   ; Set all interrupt handlers to $F9B9 (RTS)
   89 F978:A2 0E                LDX #8*2-2
   90 F97A:A0 **                LDY #>IrqStub
   91 F97C:A9 **        .10     LDA #<IrqStub
   92 F97E:9D ** **             STA interrupt_buffer,x		; Store in IRQ jump ta
   93 F981:98                   TYA
   94 F982:9D ** **             STA interrupt_buffer+1,x
   95 F985:CA                   DEX
   96 F986:CA                   DEX
   97 F987:10 F3                BPL .10
   98                   
   99 F989:80 **                BRA .9
  100                   
  101 F98B:C9 03        .3      CMP #CONTINUE_REQUEST
  102 F98D:D0 **                BNE .4
  103                   ; Restore all previous values and return from NMI hand
  104 F98F:             .9
  105 F98F:AE ** **             LDX SaveSP      ; Restore stack pointer
  106 F992:9A                   TXS
  107 F993:AD ** **             LDA SavePS
  108 F996:48                   PHA
  109 F997:AD ** **             LDA SaveA       ; Load stored values for A, X,
  110 F99A:AE ** **             LDX SaveX
  111 F99D:AC ** **             LDY SaveY
  112 F9A0:28                   PLP             ; Restore PS to stack
  113 F9A1:6C ** **             JMP (SavePCHi)  ; Jump back to pre-NMI address
  114                   
  115 F9A4:C9 04        .4      CMP #SLAVE_REQUEST		; Control command: 04 mean
  116 F9A6:D0 **                BNE .6
  117 F9A8:20 ** **             JSR Ritual2
  118 F9AB:A9 00                LDA #$00
  119 F9AD:20 ** **             JSR WriteByte   ; Zero (A) to page 1
  120 F9B0:20 ** **             JSR Ritual3		; Perform ritual 3
  121 F9B3:4C 59 F9             JMP Main		; Next control command
Epyx HandyAsm 1.12      monitor.src                     08-Apr-12516:32:34 Page    3
                                                        16:32:34  

  122                   
  123 F9B6:4C 59 F9     .6      JMP Main		; Next control command
  124                   
  125 F9B9:             IrqStub
  126 F9B9:60                   RTS
  127                   
  128                   ; Control loop for downloading bin from Pinky to Mandy
  129 F9BA:             Download
  130 F9BA:20 ** **             JSR ReadByte    ; Read byte from parallel port
  131                   
  132 F9BD:C9 00                CMP #END_OF_FILE ; End of .bin file
  133 F9BF:D0 **                BNE .7
  134 F9C1:4C ** **             JMP Done
  135                   
  136 F9C4:C9 01        .7      CMP #ORIGIN		; Receive load address (1)
  137 F9C6:D0 **                BNE .8
  138 F9C8:20 ** **             JSR ReadAddress ; Read address from parallel p
  139 F9CB:86 F8                STX dest        ; Low byte
  140 F9CD:85 F9                STA dest+1      ; High byte
  141 F9CF:4C ** **             JMP NextCommand ; Next command
  142                   
  143 F9D2:             .8
  144 F9D2:C9 02                CMP #DATA		; Load data (2)
  145 F9D4:D0 **                BNE .9
  146 F9D6:20 ** **             JSR ReadByte	; Read byte from parallel port
  147 F9D9:20 ** **             JSR ReadByte	; and another one, discarding fir
  148 F9DC:A8                   TAY			    ; Store in Y
  149 F9DD:20 ** **             JSR ReadRange   ; Read Y number of bytes and s
  150 F9E0:80 **                BRA NextCommand ; Next command
  151                   
  152 F9E2:C9 03        .9      CMP #RUN_ADDRESS		; Receive run address (3)
  153 F9E4:D0 **                BNE .10
  154 F9E6:20 ** **             JSR ReadAddress ; Read two bytes to X and A
  155 F9E9:8E ** **             STX RunAddr		; Store in a special place ;) Run
  156 F9EC:8D ** **             STA RunAddr+1
  157 F9EF:80 **                BRA NextCommand ; Next command
  158                   
  159 F9F1:C9 10        .10     CMP #REGISTER	; Read registers from Amiga/PC
  160 F9F3:D0 **                BNE .11
  161 F9F5:A9 **                LDA #<SaveA		; Store $FBB0 as address in $F8, 
  162 F9F7:85 F8                STA dest
  163 F9F9:A9 **                LDA #>SaveA
  164 F9FB:85 F9                STA dest+1
  165 F9FD:A0 07                LDY #REGISTER_BYTECOUNT	; Read 7 bytes to $FBB
  166 F9FF:20 ** **             JSR ReadRange
  167 FA02:80 **                BRA NextCommand ; Next command
  168                   
  169 FA04:             .11     
  170 FA04:C9 11                CMP #FILL_MEM   ; Fill Range with value: 11 Va
  171 FA06:D0 **                BNE .12
  172 FA08:20 ** **             JSR ReadByte    ; Read fill value 
  173 FA0B:48                   PHA
  174 FA0C:20 ** **             JSR ReadAddress ; Read destination address 
  175 FA0F:86 F8                STX dest
  176 FA11:85 F9                STA dest+1
  177 FA13:20 ** **             JSR ReadByte    ; Read count
  178 FA16:A8                   TAY
  179 FA17:68                   PLA
  180 FA18:92 F8        .20     STA (dest)		; Store at address in ($F8)
Epyx HandyAsm 1.12      monitor.src                     08-Apr-12516:32:34 Page    4
                                                        16:32:34  

  181 FA1A:E6 F8                INC dest
  182 FA1C:D0 **                BNE .21
  183 FA1E:E6 F9                INC dest+1
  184 FA20:88           .21     DEY
  185 FA21:D0 F5                BNE .20
  186 FA23:80 **                BRA NextCommand
  187                   
  188                   ; Assumes ORIGIN is previous command to set destinatio
  189 FA25:C9 12        .12     CMP #LARGE_DATA	; Load longer range of data (1
  190 FA27:D0 **                BNE NextCommand
  191 FA29:20 ** **             JSR ReadAddress ; Read length
  192 FA2C:A8                   TAY
  193 FA2D:8A                   TXA
  194 FA2E:F0 **                BEQ .30
  195 FA30:C8                   INY
  196 FA31:20 ** **     .30     JSR ReadByte	; Read data from parallel port
  197 FA34:92 F8                STA (dest)		; Store in location at $F8
  198 FA36:E6 F8                INC dest
  199 FA38:D0 **                BNE .31
  200 FA3A:E6 F9                INC dest+1
  201 FA3C:CA           .31     DEX
  202 FA3D:D0 F2                BNE .30
  203 FA3F:88                   DEY
  204 FA40:D0 EF                BNE .30
  205 FA42:80 **                BRA NextCommand
  206                   
  207 FA44:             NextCommand
  208 FA44:4C BA F9             JMP Download    ; And read next command
  209                   
  210 FA47:             Done
  211 FA47:60                   RTS
  212                   
  213 FA48:             Upload
  214 FA48:20 ** **             JSR ReadByte		; Read byte from parallel port
  215                   
  216 FA4B:C9 00                CMP #END_OF_FILE
  217 FA4D:D0 **                BNE .13
  218 FA4F:4C ** **             JMP UploadDone  ; Done
  219                   
  220 FA52:C9 01        .13     CMP #ORIGIN     ; Start address (1)
  221 FA54:D0 **                BNE .14
  222 FA56:20 ** **             JSR ReadAddress ; Read two byte and store in $
  223 FA59:86 F8                STX dest
  224 FA5B:85 F9                STA dest+1
  225 FA5D:80 **                BRA UploadNext  ; Next command
  226                   
  227 FA5F:C9 02        .14     CMP #DATA		; Send bytes to host (2)
  228 FA61:D0 **                BNE .15		
  229 FA63:20 ** **             JSR ReadByte    ; Read number of bytes to send
  230 FA66:A8                   TAY
  231 FA67:A5 F8                LDA dest		; Create backup of destination to $F
  232 FA69:85 FA                STA dest_old
  233 FA6B:A5 F9                LDA dest+1
  234 FA6D:85 FB                STA dest_old+1  ; Are these ever used?
  235                   
  236 FA6F:20 ** **             JSR Ritual2     ; Perform ritual 2
  237 FA72:A9 02                LDA #$02		; Write 2 to page 1 (Echoing command
  238 FA74:20 ** **             JSR WriteByte
  239 FA77:AD B9 FB             LDA $FBB9       ; Load value from ... (?) (FBB
Epyx HandyAsm 1.12      monitor.src                     08-Apr-12516:32:34 Page    5
                                                        16:32:34  

  240 FA7A:20 ** **             JSR WriteByte   ; Write value to page 1
  241 FA7D:98                   TYA             ; Get previously read value 
  242 FA7E:20 ** **             JSR WriteByte   ; Write length to page 1
  243 FA81:20 ** **             JSR WriteRange  ; Write Y values from ($F8) to
  244 FA84:20 ** **             JSR Ritual3		; Perform ritual 3
  245 FA87:80 **                BRA UploadNext  ; Next command
  246                   
  247 FA89:C9 10        .15     CMP #REGISTER   ; 10 means "Send registers to 
  248 FA8B:D0 **                BNE UploadNext  ; Next command for unrecognize
  249 FA8D:A9 **                LDA #<REGISTERS ; Store $FBB0 in dest as start
  250 FA8F:85 F8                STA dest
  251 FA91:A9 **                LDA #>REGISTERS
  252 FA93:85 F9                STA dest+1
  253 FA95:A0 07                LDY #REGISTER_BYTECOUNT
  254 FA97:20 ** **             JSR Ritual2     ; Perform ritual 2
  255 FA9A:A9 10                LDA #$10
  256 FA9C:20 ** **             JSR WriteByte   ; Write $10 to page 1 (Echo?)
  257 FA9F:20 ** **             JSR WriteRange  ; Write Y values from ($F8) to
  258 FAA2:20 ** **             JSR Ritual3     ; Perform ritual 3
  259 FAA5:4C ** **             JMP UploadNext  ; To next command
  260                   
  261 FAA8:             UploadNext        
  262 FAA8:4C 48 FA             JMP Upload		; Next upload command
  263 FAAB:             UploadDone
  264 FAAB:60                   RTS
  265                   
  266 FAAC:             ReadMemory
  267 FAAC:AD EF FB             LDA $FBEF		; IRQ jump table counter?
  268 FAAF:D0 **                BNE .40
  269 FAB1:A5 F9                LDA dest+1
  270 FAB3:C9 FC                CMP #>SUZY_BASE ; Check if in Suzy space
  271 FAB5:D0 **                BNE .40
  272 FAB7:A5 F8                LDA dest
  273 FAB9:C9 84                CMP #$84        ; Do nothing for $FC84 and bel
  274 FABB:90 **                BCC .41
  275 FABD:B2 F8        .40     LDA (dest)		; Load value at address
  276 FABF:60           .41     RTS
  277                   
  278 FAC0:             ReadAddress
  279 FAC0:20 ** **             JSR ReadByte    ; Read low byte in X
  280 FAC3:AA                   TAX			    ; 
  281 FAC4:4C ** **             JMP ReadByte    ; Read high byte in A
  282                   
  283 FAC7:             ReadRange
  284                   ; Read Y bytes and store in memory location specified 
  285 FAC7:20 ** **             JSR ReadByte    ; Read byte from parallel port
  286 FACA:92 F8                STA (dest)      ; Store in address at $F8-$F9
  287 FACC:E6 F8                INC dest        ; Increase address
  288 FACE:D0 **                BNE .42
  289 FAD0:E6 F9                INC dest+1
  290 FAD2:88           .42     DEY
  291 FAD3:D0 F2                BNE ReadRange   ; Until Y is zero
  292 FAD5:60                   RTS
  293                           
  294 FAD6:             WriteRange
  295 FAD6:20 AC FA             JSR ReadMemory  ; Read memory value at ($00F8)
  296 FAD9:20 ** **             JSR WriteByte   ; Write value to page 1
  297 FADC:E6 F8                INC dest
  298 FADE:D0 **                BNE .43
Epyx HandyAsm 1.12      monitor.src                     08-Apr-12516:32:34 Page    6
                                                        16:32:34  

  299 FAE0:E6 F9                INC dest+1
  300 FAE2:88           .43     DEY
  301 FAE3:D0 F1                BNE WriteRange
  302 FAE5:60                   RTS			    ; Until Y values have been written
  303                   
  304 FAE6:             ReadByte
  305 FAE6:20 ** **             JSR ReadPage8   ; Read from page 8
  306 FAE9:10 FB                BPL ReadByte    ; Wait for bit 7 on strobe
  307 FAEB:4C ** **             JMP ReadPage9   ; Read from page 9
  308                   
  309 FAEE:             WriteByte               ; Write A to page 1, preserves
  310 FAEE:48                   PHA
  311 FAEF:20 ** **     .44     JSR ReadPage8   ; Read from page 8
  312 FAF2:10 FB                BPL .44         ; Wait for bit 7 on strobe
  313 FAF4:68                   PLA
  314 FAF5:4C ** **             JMP WritePage1  ; Write A to page 1 and return
  315                   
  316 FAF8:             Ritual2
  317 FAF8:20 ** **             JSR ReadPage8   ; Read from page 8
  318 FAFB:29 40                AND #$40
  319 FAFD:F0 F9                BEQ Ritual2		; Wait for strobe
  320 FAFF:20 ** **             JSR Write0Page2 ; Zero to page 2
  321 FB02:4C ** **             JMP Write0Page7 ; Zero to page 7 and return
  322                   
  323 FB05:             Ritual3
  324 FB05:20 ** **             JSR ReadPage8   ; Read from page 8
  325 FB08:10 FB                BPL Ritual3     ; Wait for bit 7 on strobe
  326 FB0A:20 ** **             JSR Write0Page6 ; Zero to page 6
  327 FB0D:4C ** **             JMP Write0Page3 ; Zero to page 3 and return
  328                   
  329 FB10:             Ritual1 ; Preserves A
  330 FB10:48                   PHA
  331 FB11:20 ** **     .52     JSR ReadPage8   ; Read from page 8
  332 FB14:29 40                AND #$40
  333 FB16:D0 F9                BNE .52         ; Wait for bit 6 on strobe
  334 FB18:20 ** **             JSR Write0Page6 ; Zero to page 6
  335 FB1B:20 ** **             JSR Write0Page7 ; Zero to page 7
  336 FB1E:20 ** **     .53     JSR ReadPage8   ; Read from page 8
  337 FB21:29 40                AND #$40        ; Check if bit 6 was on strobe
  338 FB23:F0 F9                BEQ .53         ; Wait until strobe was receiv
  339 FB25:20 ** **             JSR Write0Page6 ; Zero to page 6
  340 FB28:20 ** **             JSR Write0Page3 ; Zero to page 3
  341 FB2B:68                   PLA
  342 FB2C:60                   RTS
  343                   
  344                   ; Write zero to page 6, 2, 7 or 3
  345 FB2D:             Write0Page6
  346 FB2D:A9 06                LDA #$06
  347 FB2F:80 **                BRA WriteCart1
  348 FB31:             Write0Page2
  349 FB31:A9 02                LDA #$02
  350 FB33:80 **                BRA WriteCart1
  351 FB35:             Write0Page7
  352 FB35:A9 07                LDA #$07
  353 FB37:80 **                BRA WriteCart1
  354 FB39:             Write0Page3
  355 FB39:A9 03                LDA #$03
  356 FB3B:             WriteCart1
  357 FB3B:20 ** **             JSR SetPage     ; Set page number to 6, 2, 7 o
Epyx HandyAsm 1.12      monitor.src                     08-Apr-12516:32:34 Page    7
                                                        16:32:34  

  358 FB3E:9C B3 FC             STZ RCART_1     ; Write zero to indicate ...? 
  359 FB41:60                   RTS
  360                   
  361 FB42:             ReadPage8
  362 FB42:A9 08                LDA #$08		; Set page number to #08 for strobe
  363 FB44:80 **                BRA ReadCart1
  364 FB46:             ReadPage9
  365 FB46:A9 09                LDA #$09
  366 FB48:             ReadCart1
  367 FB48:20 ** **             JSR SetPage     ; Set page number to #09 for d
  368 FB4B:AD B3 FC             LDA RCART_1     ; Read data from cart1 port
  369 FB4E:60                   RTS
  370                   
  371 FB4F:                     .ORG $FB4F
  372                   
  373                   ; Write A to page 1, preserves A
  374 FB4F:             WritePage1
  375 FB4F:48                   PHA
  376 FB50:A9 01                LDA #$01		; Set page number to #01 for output 
  377 FB52:20 ** **             JSR SetPage
  378 FB55:68                   PLA
  379 FB56:8D B3 FC             STA RCART_1
  380 FB59:60                   RTS
  381                   
  382 FB5A:             SetPage
  383 FB5A:DA                   PHX
  384 FB5B:5A                   PHY
  385 FB5C:AA                   TAX
  386 FB5D:A0 02                LDY #POWERON
  387 FB5F:8C 87 FD             STY SYSCTL1
  388 FB62:C8                   INY
  389 FB63:AD 8B FD             LDA IODAT
  390 FB66:09 08                ORA #RESTLESS
  391 FB68:8D 8B FD             STA IODAT
  392 FB6B:AD ** **             LDA IODAT_RAM
  393 FB6E:09 02                ORA #CART_ADDR_DATA
  394 FB70:09 08                ORA #RESTLESS
  395 FB72:8D 8A FD             STA IODIR
  396 FB75:AD 8B FD             LDA IODAT
  397 FB78:09 02                ORA #CART_ADDR_DATA
  398 FB7A:09 08                ORA #RESTLESS
  399 FB7C:8D ** **             STA Unknown3
  400 FB7F:29 FD                AND #~CART_ADDR_DATA
  401 FB81:09 08                ORA #RESTLESS
  402 FB83:8D ** **             STA Unknown3+1
  403 FB86:8A                   TXA
  404 FB87:38                   SEC
  405 FB88:2A                   ROL A
  406 FB89:90 **        .52     BCC .50
  407 FB8B:AE ** **             LDX Unknown3
  408 FB8E:8E 8B FD             STX IODAT
  409 FB91:80 **                BRA .51
  410 FB93:AE ** **     .50     LDX Unknown3+1
  411 FB96:8E 8B FD             STX IODAT
  412 FB99:8C 87 FD     .51     STY SYSCTL1
  413 FB9C:88                   DEY
  414 FB9D:8C 87 FD             STY SYSCTL1
  415 FBA0:C8                   INY
  416 FBA1:0A                   ASL A
Epyx HandyAsm 1.12      monitor.src                     08-Apr-12516:32:34 Page    8
                                                        16:32:34  

  417 FBA2:D0 E5                BNE .52
  418 FBA4:A9 08                LDA #RESTLESS
  419 FBA6:8D 8B FD             STA IODAT
  420 FBA9:7A                   PLY
  421 FBAA:FA                   PLX
  422 FBAB:60                   RTS
  423                   
  424 FBAC:             Unknown3    .DS 2
  425 FBAE:             RunAddr     .DS 2      ; FBAE-FBAF
  426                   
  427 FBB0:             REGISTERS
  428 FBB0:             SaveA       .DS 1      ; FBB0
  429 FBB1:             SaveX       .DS 1      ; FBB1
  430 FBB2:             SaveY       .DS 1      ; FBB2
  431 FBB3:             SaveSP      .DS 1      ; FBB3
  432 FBB4:             SavePCHi    .DS 1      ; FBB4
  433 FBB5:             SavePCLo    .DS 1      ; FBB5
  434 FBB6:             SavePS      .DS 1      ; FBB6
  435                   
  436 FBB7:             Unknown1    .DS 1      ; FBB7
  437 FBB8:             MAPCTL_RAM  .DS 1      ; FBB8
  438 FBB9:             VERSION     .DS 1      ; Version?
  439 FBBA:             Unknown     .DS 1      ; FBBA
  440 FBBB:             IODAT_RAM   .DS 1      ; FBBB
  441                   
  442 FBBC:             IrqHandler             ; FBBC
  443                   * This code is called whenever a non-NMI interrupt occ
  444                   * interrupt or execution of a software BRK).
  445                   
  446 FBBC:             UserIntHandler
  447 FBBC:48           		PHA
  448 FBBD:DA           		PHX
  449                   
  450                   	  ;-- Check if we got here because of a BRK instructi
  451                   	  ;-- the BRK routine if so, else branch to the inter
  452 FBBE:BA           		TSX
  453 FBBF:E8           		INX
  454 FBC0:E8           		INX
  455 FBC1:E8           		INX
  456 FBC2:BD 00 01     		LDA $0100,X		; Get a copy of the status byte
  457 FBC5:29 10        		AND #$10		; Check break bit
  458 FBC7:F0 **        		BEQ hardInt		; and branch if clear (hardware int)
  459                   
  460 FBC9:FA                   PLX
  461 FBCA:68                   PLA
  462 FBCB:4C 31 F9             JMP NmiHandler  ; Same as NMI vector
  463                   
  464 FBCE:             hardInt
  465                   		;------	We had a hardware interrupt.
  466                   		;------	Get the interrupt flags value, reset the bit
  467 FBCE:AD 81 FD             LDA INTSET
  468 FBD1:8D 80 FD             STA INTRST      ; Clear all interrupts
  469 FBD4:A2 00                LDX #$00        ; Prepare IRQ jump table offse
  470 FBD6:89 01        .00     BIT #$01        ; Check if interrupt was trigg
  471 FBD8:F0 **                BEQ .01
  472 FBDA:20 ** **             JSR jumpIntTable
  473 FBDD:4A           .01     LSR A           ; Move to next interrupt
  474 FBDE:E8                   INX             ; Advance IRQ jump table offse
  475 FBDF:E8                   INX
Epyx HandyAsm 1.12      monitor.src                     08-Apr-12516:32:34 Page    9
                                                        16:32:34  

  476 FBE0:E0 0E                CPX #$0E        ; Verify if passing last entry
  477 FBE2:90 F2                BCC .00         ; Next iteration
  478                   
  479 FBE4:             IntReturn
  480                   		;------	At end of interrupt processing, restore the
  481                   		;------	registers and return from interrupt
  482 FBE4:FA                   PLX
  483 FBE5:68                   PLA
  484 FBE6:40                   RTI
  485                   
  486 FBE7:             jumpIntTable
  487 FBE7:7C ** **             JMP (interrupt_buffer,X) 		; Jump to handler f
  488                   
  489 FBEA:                     .ORG $FBEF
  490 FBEF:01           Unknown2          .BYTE 1   ; FBEF
  491 FBF0:B9 F9 B9 F9  interrupt_buffer  .WORD $F9B9, $F9B9, $F9B9, $F9B9, $F
  491      B9 F9 B9 F9  
  491      B9 F9 B9 F9  
  491      B9 F9 B9 F9  
  491                   
Epyx HandyAsm 1.12      Symbols                         08-Apr-12516:32:34 Page   10
                                                        16:32:34  

$0040 ACCUMULATE                        $0040 ALGO_3
$0000 ASM.EQUSYMS                       $010C ASM.VERSION
$FD40 ATTENREG0                         $FD41 ATTENREG1
$FD42 ATTENREG2                         $FD43 ATTENREG3
$FD86 AUDIN                             $0010 AUDIN_BIT
$FD20 AUDIO0                            $FD28 AUDIO1
$FD30 AUDIO2                            $FD38 AUDIO3
$0000 AUD_1                             $0004 AUD_16
$0001 AUD_2                             $0005 AUD_32
$0002 AUD_4                             $0006 AUD_64
$0003 AUD_8                             $0004 AUD_BACKUP
$0007 AUD_CLOCK_MASK                    $0005 AUD_CONTROL
$0006 AUD_COUNTER                       $0001 AUD_FEEDBACK
$0007 AUD_LINKING                       $0007 AUD_OTHER
$0002 AUD_OUTPUT                        $0003 AUD_SHIFT
$0000 AUD_VOLCNTRL                      $0001 A_BUTTON
$0000 A_OFFSET                          $0000 BACKGROUND_SPRITE
$0001 BACKNONCOLL_SPRITE                $0000 BACK_SHADOW_SPRITE
$00C0 BITS_MASK                         $FDB0 BLUERED0
$FDB1 BLUERED1                          $FDB2 BLUERED2
$FDB3 BLUERED3                          $FDB4 BLUERED4
$FDB5 BLUERED5                          $FDB6 BLUERED6
$FDB7 BLUERED7                          $FDB8 BLUERED8
$FDB9 BLUERED9                          $FDBA BLUEREDA
$FDBB BLUEREDB                          $FDBC BLUEREDC
$FDBD BLUEREDD                          $FDBE BLUEREDE
$FDBF BLUEREDF                          $0002 BORROW_IN
$0001 BORROW_OUT                        $0003 BOUNDARY_SPRITE
$0015 BREAK_CONTROLS                    $0001 BRK_USER
$0002 BSHADOW_SPRITE                    $0013 BUS_MONITOR
$0002 B_BUTTON                          $0002 CART0_IO_INACTIVE
$0004 CART1_IO_INACTIVE                 $0002 CART_ADDR_DATA
$0001 CART_ADDR_STROBE                  $0002 CART_POWER_OFF
$FC0F COLLADRH                          $FC0E COLLADRL
$FC0B COLLBASH                          $FC0A COLLBASL
$FC25 COLLOFFH                          $FC24 COLLOFFL
$0003 CONTINUE_REQUEST                  $FD91 CPUSLEEP
$FFFE CPU_IRQ                           $FFFA CPU_NMI
$FFFC CPU_RESET                         $0002 DATA
$FD95 DISPADRH                          $FD94 DISPADRL
$FD92 DISPCTL                           $1FE0 DISPLAY_BUFSIZE
$0008 DISP_COLOR                        $0002 DISP_FLIP
$0004 DISP_FOURBIT                      $0001 DMA_ENABLE
$0001 DOWNLOAD_REQUEST                  $0001 DRAW_LEFT
$0002 DRAW_UP                           $FA47 Done
$F9BA Download                          $0008 ENABLE_COUNT
$0080 ENABLE_INT                        $0020 ENABLE_INTEGRATE
$0010 ENABLE_RELOAD                     $0000 END_OF_FILE
$0004 EVER_ON                           $0001 EXTERNAL_POWER
$0080 FEEDBACK_7                        $0011 FILL_MEM
$0004 FLIP_BUTTON                       $00C0 FOUR_PER_PIXEL
$0004 FRAMERR                           $0005 GO_REQUEST
$FDA0 GREEN0                            $FDA1 GREEN1
$FDA2 GREEN2                            $FDA3 GREEN3
$FDA4 GREEN4                            $FDA5 GREEN5
$FDA6 GREEN6                            $FDA7 GREEN7
$FDA8 GREEN8                            $FDA9 GREEN9
$FDAA GREENA                            $FDAB GREENB
Epyx HandyAsm 1.12      Symbols                         08-Apr-12516:32:34 Page   11
                                                        16:32:34  

$FDAC GREENC                            $FDAD GREEND
$FDAE GREENE                            $FDAF GREENF
$FC00 HARDWARE_START                    $FD00 HCOUNT
$0020 HFLIP                             $0007 HIDE_HOWARD_REQUEST
$FC05 HOFFH                             $FC04 HOFFL
$0001 HORIZONTAL_INT                    $0016 HOWARD_ABUS
$0017 HOWARD_BBUS                       $0018 HOWARD_CBUS
$0019 HOWARD_DBUS                       $FCC4 HOWIE
$FC15 HPOSSTRTH                         $FC14 HPOSSTRTL
$FC29 HSIZOFFH                          $FC28 HSIZOFFL
$0002 INNER_BUTTON                      $FD80 INTRST
$FD81 INTSET                            $FD8B IODAT
$FBBB IODAT_RAM                         $FD8A IODIR
$FCC3 IOData                            $FCC2 IOStatus
$FBE4 IntReturn                         $FBF0 IntTable
$FBBC IrqHandler                        $F9B9 IrqStub
$FCB0 JOYSTICK                          $0080 JOY_DOWN
$0010 JOY_LEFT                          $0020 JOY_RIGHT
$0040 JOY_UP                            $0012 LARGE_DATA
$0004 LAST_CLOCK                        $FCC0 LEDS
$0010 LEFT0_SELECT                      $0020 LEFT1_SELECT
$0040 LEFT2_SELECT                      $0080 LEFT3_SELECT
$0008 LEFTHAND                          $0008 LEFTHANDED
$00F0 LEFT_ATTENMASK                    $0080 LITERAL
$FFF9 MAPCTL                            $FBB8 MAPCTL_RAM
$FC55 MATHA                             $FC54 MATHB
$FC53 MATHC                             $0020 MATHCARRY
$FC52 MATHD                             $FC63 MATHE
$FC62 MATHF                             $FC61 MATHG
$FC60 MATHH                             $FC6F MATHJ
$FC6E MATHK                             $FC6D MATHL
$FC6C MATHM                             $FC57 MATHN
$FC56 MATHP                             $0040 MATHWARNING
$0080 MATHWORKING                       $FD88 MIKEYHREV
$FD89 MIKEYSREV                         $FD00 MIKEY_BASE
$0002 MIKEY_SPACE                       $0010 MONITOR_BYTECOUNT
$0001 MONITOR_I                         $F900 MONITOR_RAM_RESERVED
$00F8 MONITOR_ZP_RESERVED               $FD44 MPAN
$FD50 MSTEREO                           $FD9C MTEST0
$FD9D MTEST1                            $FD9E MTEST2
$F959 Main                              $0004 NOEXP
$0005 NONCOLL_SPRITE                    $0000 NOP_REQUEST
$0004 NORMAL_SPRITE                     $0020 NO_COLLIDE
$FA44 NextCommand                       $F931 NmiHandler
$0000 ONE_PER_PIXEL                     $0008 OPTION1_BUTTON
$0004 OPTION2_BUTTON                    $0001 ORIGIN
$0001 OUTER_BUTTON                      $0008 OVERRUN
$0001 PARBIT                            $0010 PAREN
$0010 PARERR                            $0001 PAREVEN
$0001 PAUSE_SWITCH                      $FD93 PBKUP
$0004 PC_OFFSET                         $0002 POWERON
$FC2F PROCADRH                          $FC2E PROCADRL
$0006 P_OFFSET                          $FCB2 RCART_0
$FCB3 RCART_1                           $0010 READ_ENABLE
$0010 REGISTER                          $FBB0 REGISTERS
$0007 REGISTER_BYTECOUNT                $0010 RELOAD_HV
$0020 RELOAD_HVS                        $0030 RELOAD_HVST
$0030 RELOAD_MASK                       $0000 RELOAD_NONE
$0008 RESETERR                          $0040 RESET_DONE
Epyx HandyAsm 1.12      Symbols                         08-Apr-12516:32:34 Page   12
                                                        16:32:34  

$0008 RESTART_BUTTON                    $0008 RESTLESS
$0008 REUSE_PALETTE                     $0001 RIGHT0_SELECT
$0002 RIGHT1_SELECT                     $0004 RIGHT2_SELECT
$0008 RIGHT3_SELECT                     $000F RIGHT_ATTENMASK
$001A ROM                               $0004 ROM_SPACE
$0003 RUN_ADDRESS                       $0002 RXBRK
$0040 RXINTEN                           $0040 RXRDY
$FAC0 ReadAddress                       $FAE6 ReadByte
$FB48 ReadCart1                         $FAAC ReadMemory
$FB42 ReadPage8                         $FB46 ReadPage9
$FAC7 ReadRange                         $FB10 Ritual1
$FAF8 Ritual2                           $FB05 Ritual3
$FBAE RunAddr                           $FC2D SCBADRH
$FC2C SCBADRL                           $FC11 SCBNEXTH
$FC10 SCBNEXTL                          $FC23 SCVPOSH
$FC22 SCVPOSL                           $FD90 SDONEACK
$0006 SEE_HOWARD_REQUEST                $FD8C SERCTL
$FD8D SERDAT                            $FD10 SERIALRATE
$0010 SERIAL_INT                        $0007 SHADOW_SPRITE
$0080 SIGNMATH                          $0004 SKIP_SPRITE
$0004 SLAVE_REQUEST                     $FC82 SPRCOLL
$FC80 SPRCTL0                           $FC81 SPRCTL1
$FC13 SPRDLINEH                         $FC12 SPRDLINEL
$FC21 SPRDOFFH                          $FC20 SPRDOFFL
$FC91 SPRGO                             $FC19 SPRHSIZH
$FC18 SPRHSIZL                          $FC83 SPRINIT
$0002 SPRITESTOP                        $0002 SPRITETOSTOP
$0001 SPRITEWORKING                     $0001 SPRITE_GO
$FC92 SPRSYS                            $FC1B SPRVSIZH
$FC1A SPRVSIZL                          $FC1D STRETCHH
$FC1C STRETCHL                          $FC90 SUZYBUSEN
$FC88 SUZYHREV                          $FC89 SUZYSREV
$FC00 SUZY_BASE                         $0001 SUZY_SPACE
$FCB1 SWITCHES                          $FD87 SYSCTL1
$0003 S_OFFSET                          $FBB0 SaveA
$FBB4 SavePCHi                          $FBB5 SavePCLo
$FBB6 SavePS                            $FBB3 SaveSP
$FBB1 SaveX                             $FBB2 SaveY
$FB5A SetPage                           $0080 THREE_PER_PIXEL
$FC03 TILTACUMH                         $FC02 TILTACUML
$FC1F TILTH                             $FC1E TILTL
$FD00 TIMER0                            $0001 TIMER0_INT
$FD04 TIMER1                            $0002 TIMER1_INT
$FD08 TIMER2                            $0004 TIMER2_INT
$FD0C TIMER3                            $0008 TIMER3_INT
$FD10 TIMER4                            $FD14 TIMER5
$0020 TIMER5_INT                        $FD18 TIMER6
$0040 TIMER6_INT                        $FD1C TIMER7
$0080 TIMER7_INT                        $0008 TIMER_DONE
$0000 TIM_BACKUP                        $0001 TIM_CONTROLA
$0003 TIM_CONTROLB                      $0002 TIM_COUNT
$FC01 TMPADRH                           $FC00 TMPADRL
$0014 TRACE                             $0080 TURBO_DISABLE
$0040 TWO_PER_PIXEL                     $0002 TXBRK
$0020 TXEMPTY                           $0080 TXINTEN
$0004 TXOPEN                            $0080 TXRDY
$0004 UNSAFEACCESS                      $0004 UNSAFEACCESSRST
$0002 UPLOAD_REQUEST                    $0002 UP_CURRENT_PAGE
$0005 UP_HAHDATA                        $0004 UP_MEMWATCH
Epyx HandyAsm 1.12      Symbols                         08-Apr-12516:32:34 Page   13
                                                        16:32:34  

$0003 UP_REGISTERS                      $0001 UP_THIS_PAGE
$FBBA Unknown                           $FBB7 Unknown1
$FBEF Unknown2                          $FBAC Unknown3
$FA48 Upload                            $FAAB UploadDone
$FAA8 UploadNext                        $FBBC UserIntHandler
$FD08 VCOUNT                            $0008 VECTOR_SPACE
$FBB9 VERSION                           $0004 VERTICAL_INT
$0010 VFLIP                             $FC0D VIDADRH
$FC0C VIDADRL                           $FC09 VIDBASH
$FC08 VIDBASL                           $FC07 VOFFH
$FC06 VOFFL                             $FC17 VPOSSTRTH
$FC16 VPOSSTRTL                         $FC27 VSIZACUMH
$FC26 VSIZACUML                         $FC2B VSIZOFFH
$FC2A VSIZOFFL                          $0010 VSTRETCH
$0010 VSTRETCHING                       $FB31 Write0Page2
$FB39 Write0Page3                       $FB2D Write0Page6
$FB35 Write0Page7                       $FAEE WriteByte
$FB3B WriteCart1                        $FB4F WritePage1
$FAD6 WriteRange                        $0006 XOR_SHADOW_SPRITE
$0006 XOR_SPRITE                        $0001 X_OFFSET
$0002 Y_OFFSET                          $00F8 dest
$00FA dest_old                          $FBCE hardInt
$FBF0 interrupt_buffer                  $FBE7 jumpIntTable
