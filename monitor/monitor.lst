Epyx HandyAsm 1.12      monitor                         14-Apr-12500:40:40 Page    1
                                                        00:40:40  

    1                   * Research
    2                   * $FBB9 (Version number? send as part of data request 
    3                   
    4                   * ====================================================
    5                   
    6                   	.LIST OFF
   11                   	.LIST ON
   12                   
   13      0001         BRK_USER		.EQ 1
   14                   
   15                   * ====================================================
   16                   
   17 FFFE:             		.ORG MONITOR_ZP_RESERVED
   18                   
   19 00F8:             dest		.DS 2	; F8-F9
   20 00FA:             dest_old	.DS 2	; FA-FB
   21                   
   22                   * ====================================================
   23                   
   24 00FC:             		.ORG MONITOR_RAM_RESERVED
   25                   
   26 F900:78           		SEI
   27 F901:D8           		CLD
   28 F902:A9 08        		LDA #VECTOR_SPACE
   29 F904:8D ** **     		STA MAPCTL_RAM
   30 F907:8D F9 FF     		STA MAPCTL	
   31 F90A:A9 **        		LDA #<NmiHandler	; Set NMI vector to $F931
   32 F90C:8D FA FF     		STA CPU_NMI
   33 F90F:A9 **        		LDA #>NmiHandler
   34 F911:8D FB FF     		STA CPU_NMI+1
   35 F914:A9 **        		LDA #<UserIntHandler ; Set IRQ vector to $FBBC
   36 F916:8D FE FF     		STA CPU_IRQ
   37 F919:A9 **        		LDA #>UserIntHandler
   38 F91B:8D FF FF     		STA CPU_IRQ+1
   39 F91E:A9 0A        		LDA #RESTLESS+CART_POWER_OFF
   40 F920:8D 8B FD     		STA IODAT
   41 F923:8D 8A FD     		STA IODIR
   42 F926:8D ** **     		STA IODIR_RAM
   43 F929:20 ** **     		JSR Write0Page6		; Write zero to page 6 on RCART_1
   44 F92C:A9 04        		LDA #TXOPEN			; Turn off serial IRQs before starting
   45 F92E:8D 8C FD     		STA SERCTL			; and make sure serial port is open-col
   46                   
   47 F931:             NmiHandler
   48 F931:8D ** **     		STA SaveA 			; Store accumulator, X and Y register f
   49 F934:8E ** **     		STX SaveX
   50 F937:8C ** **     		STY SaveY
   51 F93A:68           		PLA 				; Get PC, ReturnHi, ReturnLo from stack
   52 F93B:FA           		PLX
   53 F93C:7A           		PLY
   54 F93D:8D ** **     		STA SavePS			; Store for inspection
   55 F940:8E ** **     		STX SavePCHi
   56 F943:8C ** **     		STY SavePCLo
   57 F946:BA           		TSX					; Store stack pointer 
   58 F947:8E ** **     		STX SaveSP
   59                   
   60                   ; Silence all audio channels
   61 F94A:9C 20 FD     		STZ AUDIO0+AUD_VOLCNTRL
   62 F94D:9C 28 FD     		STZ AUDIO1+AUD_VOLCNTRL
Epyx HandyAsm 1.12      monitor                         14-Apr-12500:40:40 Page    2
                                                        00:40:40  

   63 F950:9C 30 FD     		STZ AUDIO2+AUD_VOLCNTRL
   64 F953:9C 38 FD     		STZ AUDIO3+AUD_VOLCNTRL
   65                   
   66 F956:20 ** **     		JSR InitComm
   67                   
   68 F959:             Main
   69 F959:20 ** **     		JSR ReadByte		; Read byte from parallel port
   70                   
   71 F95C:C9 01        		CMP #DOWNLOAD_REQUEST ; Control command: 01 means "D
   72 F95E:D0 **        		BNE .2
   73 F960:20 ** **     		JSR Download		; Control loop for downloading files f
   74 F963:80 F4        		BRA Main			; Next command
   75                   
   76 F965:C9 02        .2		CMP #UPLOAD_REQUEST	; Control command: 02 means "U
   77 F967:D0 **        		BNE .5
   78 F969:20 ** **     		JSR Upload			; Control loop for uploading data from 
   79 F96C:4C 59 F9     		JMP Main			; Next command
   80                   
   81 F96F:C9 05        .5		CMP #GO_REQUEST		; Control command: 05 means "Go"
   82 F971:D0 **        		BNE .3				; Check whether to return from NMI
   83                   
   84 F973:A9 04        		LDA #TXOPEN			; Turn off serial IRQs before starting
   85 F975:8D 8C FD     		STA SERCTL			; and make sure serial port is open-col
   86                   
   87                   ; Set all interrupt handlers to $F9B9 (RTS)
   88 F978:A2 0E        		LDX #8*2-2
   89 F97A:A0 **        		LDY #>IrqStub
   90 F97C:A9 **        .10		LDA #<IrqStub
   91 F97E:9D ** **     		STA interrupt_buffer,x		; Store in IRQ jump table
   92 F981:98           		TYA
   93 F982:9D ** **     		STA interrupt_buffer+1,x
   94 F985:CA           		DEX
   95 F986:CA           		DEX
   96 F987:10 F3        		BPL .10
   97                   
   98 F989:80 **        		BRA .9
   99                   
  100 F98B:C9 03        .3		CMP #CONTINUE_REQUEST
  101 F98D:D0 **        		BNE .4
  102                   ; Restore all previous values and return from NMI hand
  103 F98F:             .9
  104 F98F:AE ** **     		LDX SaveSP		; Restore stack pointer
  105 F992:9A           		TXS
  106 F993:AD ** **     		LDA SavePS
  107 F996:48           		PHA
  108 F997:AD ** **     		LDA SaveA		; Load stored values for A, X, Y 
  109 F99A:AE ** **     		LDX SaveX
  110 F99D:AC ** **     		LDY SaveY
  111 F9A0:28           		PLP				; Restore PS to stack
  112 F9A1:6C ** **     		JMP (SavePCHi)	; Jump back to pre-NMI address
  113                   
  114 F9A4:C9 04        .4		CMP #SLAVE_REQUEST
  115 F9A6:D0 **        		BNE .6
  116 F9A8:20 ** **     		JSR BeginUpload
  117 F9AB:A9 00        		LDA #$00
  118 F9AD:20 ** **     		JSR WriteByte	; Zero (A) to page 1
  119 F9B0:20 ** **     		JSR EndUpload
  120 F9B3:4C 59 F9     		JMP Main		; Next control command
  121                   
Epyx HandyAsm 1.12      monitor                         14-Apr-12500:40:40 Page    3
                                                        00:40:40  

  122 F9B6:4C 59 F9     .6		JMP Main		; Next control command
  123                   
  124 F9B9:             IrqStub
  125 F9B9:60           		RTS
  126                   
  127                   ; Control loop for downloading bin from Pinky to Mandy
  128 F9BA:             Download
  129 F9BA:20 ** **     		JSR ReadByte	; Read byte from parallel port
  130                   
  131 F9BD:C9 00        		CMP #END_OF_FILE ; End of .bin file
  132 F9BF:D0 **        		BNE .7
  133 F9C1:4C ** **     		JMP Done
  134                   
  135 F9C4:C9 01        .7		CMP #ORIGIN		; Receive load address (1)
  136 F9C6:D0 **        		BNE .8
  137 F9C8:20 ** **     		JSR ReadAddress ; Read address from parallel port to
  138 F9CB:86 F8        		STX dest
  139 F9CD:85 F9        		STA dest+1
  140 F9CF:4C ** **     		JMP NextCommand
  141                   
  142 F9D2:             .8
  143 F9D2:C9 02        		CMP #DATA		; Load data of max 1-255 bytes (2)
  144 F9D4:D0 **        		BNE .9
  145 F9D6:20 ** **     		JSR ReadByte	; Read byte from parallel port 
  146 F9D9:20 ** **     		JSR ReadByte	; and another one, discarding first (po
  147 F9DC:A8           		TAY
  148 F9DD:20 ** **     		JSR ReadRange	; Read Y number of bytes and store in 
  149 F9E0:80 **        		BRA NextCommand
  150                   
  151 F9E2:C9 03        .9		CMP #RUN_ADDRESS	; Receive run address (3)
  152 F9E4:D0 **        		BNE .10
  153 F9E6:20 ** **     		JSR ReadAddress ; Read two bytes to X and A
  154 F9E9:8E ** **     		STX RunAddr		; Store in a special place
  155 F9EC:8D ** **     		STA RunAddr+1
  156 F9EF:80 **        		BRA NextCommand
  157                   
  158 F9F1:C9 10        .10		CMP #REGISTER	; Read registers from Amiga/PC
  159 F9F3:D0 **        		BNE .11
  160 F9F5:A9 **        		LDA #<SaveA		; Store $FBB0 as address in $F8, $F9
  161 F9F7:85 F8        		STA dest
  162 F9F9:A9 **        		LDA #>SaveA
  163 F9FB:85 F9        		STA dest+1
  164 F9FD:A0 07        		LDY #REGISTER_BYTECOUNT	; Read 7 bytes to $FBB0
  165 F9FF:20 ** **     		JSR ReadRange
  166 FA02:80 **        		BRA NextCommand
  167                   
  168 FA04:             .11
  169 FA04:C9 11        		CMP #FILL_MEM	; Fill Range with value: 11 Value Lo H
  170 FA06:D0 **        		BNE .12
  171 FA08:20 ** **     		JSR ReadByte	; Read fill value 
  172 FA0B:48           		PHA
  173 FA0C:20 ** **     		JSR ReadAddress	; Read destination address 
  174 FA0F:86 F8        		STX dest
  175 FA11:85 F9        		STA dest+1
  176 FA13:20 ** **     		JSR ReadByte	; Read count
  177 FA16:A8           		TAY
  178 FA17:68           		PLA
  179 FA18:92 F8        .20		STA (dest)		; Store at address in ($F8)
  180 FA1A:E6 F8        		INC dest
Epyx HandyAsm 1.12      monitor                         14-Apr-12500:40:40 Page    4
                                                        00:40:40  

  181 FA1C:D0 **        		BNE .21
  182 FA1E:E6 F9        		INC dest+1
  183 FA20:88           .21		DEY
  184 FA21:D0 F5        		BNE .20
  185 FA23:80 **        		BRA NextCommand
  186                   
  187                   ; Assumes ORIGIN is previous command to set destinatio
  188 FA25:C9 12        .12		CMP #LARGE_DATA	; Load longer range of data (12)
  189 FA27:D0 **        		BNE NextCommand
  190 FA29:20 ** **     		JSR ReadAddress ; Read length
  191 FA2C:A8           		TAY
  192 FA2D:8A           		TXA
  193 FA2E:F0 **        		BEQ .30
  194 FA30:C8           		INY
  195 FA31:20 ** **     .30		JSR ReadByte	; Read data from parallel port
  196 FA34:92 F8        		STA (dest)		; Store in location at $F8
  197 FA36:E6 F8        		INC dest
  198 FA38:D0 **        		BNE .31
  199 FA3A:E6 F9        		INC dest+1
  200 FA3C:CA           .31		DEX
  201 FA3D:D0 F2        		BNE .30
  202 FA3F:88           		DEY
  203 FA40:D0 EF        		BNE .30
  204 FA42:80 **        		BRA NextCommand
  205                   
  206 FA44:             NextCommand
  207 FA44:4C BA F9     		JMP Download	; And read next command
  208                   
  209 FA47:             Done
  210 FA47:60           		RTS
  211                   
  212 FA48:             Upload
  213 FA48:20 ** **     		JSR ReadByte	; Read byte from parallel port
  214                   
  215 FA4B:C9 00        		CMP #END_OF_FILE
  216 FA4D:D0 **        		BNE .13
  217 FA4F:4C ** **     		JMP UploadDone	; Done
  218                   
  219 FA52:C9 01        .13		CMP #ORIGIN		; Start address (1)
  220 FA54:D0 **        		BNE .14
  221 FA56:20 ** **     		JSR ReadAddress	; Read two byte and store in $F8, $F
  222 FA59:86 F8        		STX dest
  223 FA5B:85 F9        		STA dest+1
  224 FA5D:80 **        		BRA UploadNext	; Next command
  225                   
  226 FA5F:C9 02        .14		CMP #DATA		; Send bytes to host (2)
  227 FA61:D0 **        		BNE .15
  228 FA63:20 ** **     		JSR ReadByte	; Read number of bytes to send
  229 FA66:A8           		TAY
  230 FA67:A5 F8        		LDA dest		; Create backup of destination to $FA,$FB
  231 FA69:85 FA        		STA dest_old
  232 FA6B:A5 F9        		LDA dest+1
  233 FA6D:85 FB        		STA dest_old+1	; Are these ever used?
  234                   
  235 FA6F:20 ** **     		JSR BeginUpload
  236 FA72:A9 02        		LDA #$02		; Write 2 to page 1 (Echoing command?)
  237 FA74:20 ** **     		JSR WriteByte
  238 FA77:AD B9 FB     		LDA $FBB9		; Load value from $FBB9
  239 FA7A:20 ** **     		JSR WriteByte	; Write value to page 1
Epyx HandyAsm 1.12      monitor                         14-Apr-12500:40:40 Page    5
                                                        00:40:40  

  240 FA7D:98           		TYA				; Get previously read value 
  241 FA7E:20 ** **     		JSR WriteByte	; Write length to page 1
  242 FA81:20 ** **     		JSR WriteRange	; Write Y values from ($F8) to page 1
  243 FA84:20 ** **     		JSR EndUpload
  244 FA87:80 **        		BRA UploadNext
  245                   
  246 FA89:C9 10        .15		CMP #REGISTER	; $10 means "Send registers to Amig
  247 FA8B:D0 **        		BNE UploadNext	; Next command for unrecognized comma
  248 FA8D:A9 **        		LDA #<REGISTERS	; Store $FBB0 in dest as start addre
  249 FA8F:85 F8        		STA dest
  250 FA91:A9 **        		LDA #>REGISTERS
  251 FA93:85 F9        		STA dest+1
  252 FA95:A0 07        		LDY #REGISTER_BYTECOUNT
  253 FA97:20 ** **     		JSR BeginUpload
  254 FA9A:A9 10        		LDA #$10
  255 FA9C:20 ** **     		JSR WriteByte	; Write $10 to page 1 (Echo?)
  256 FA9F:20 ** **     		JSR WriteRange	; Write Y values from ($F8) to page 1
  257 FAA2:20 ** **     		JSR EndUpload
  258 FAA5:4C ** **     		JMP UploadNext
  259                   
  260 FAA8:             UploadNext
  261 FAA8:4C 48 FA     		JMP Upload		; Next upload command
  262 FAAB:             UploadDone
  263 FAAB:60           		RTS
  264                   
  265 FAAC:             ReadMemory
  266 FAAC:AD ** **     		LDA SuzyReadEnable	; IRQ jump table counter?
  267 FAAF:D0 **        		BNE .40
  268 FAB1:A5 F9        		LDA dest+1
  269 FAB3:C9 FC        		CMP #>SUZY_BASE	; Check if in Suzy space
  270 FAB5:D0 **        		BNE .40
  271 FAB7:A5 F8        		LDA dest
  272 FAB9:C9 84        		CMP #$84		; Do nothing for $FC84 and below (Unalloca
  273 FABB:90 **        		BCC .41
  274 FABD:B2 F8        .40		LDA (dest)		; Load value at address
  275 FABF:60           .41		RTS
  276                   
  277 FAC0:             ReadAddress
  278 FAC0:20 ** **     		JSR ReadByte	; Read low byte in X
  279 FAC3:AA           		TAX				; 
  280 FAC4:4C ** **     		JMP ReadByte	; Read high byte in A
  281                   
  282 FAC7:             ReadRange
  283                   ; Read Y bytes and store in memory location specified 
  284 FAC7:20 ** **     		JSR ReadByte	; Read byte from parallel port
  285 FACA:92 F8        		STA (dest)		; Store in address at $F8-$F9
  286 FACC:E6 F8        		INC dest		; Increase address
  287 FACE:D0 **        		BNE .42
  288 FAD0:E6 F9        		INC dest+1
  289 FAD2:88           .42		DEY
  290 FAD3:D0 F2        		BNE ReadRange	; Until Y is zero
  291 FAD5:60           		RTS
  292                   
  293 FAD6:             WriteRange
  294 FAD6:20 AC FA     		JSR ReadMemory	; Read memory value at ($00F8)
  295 FAD9:20 ** **     		JSR WriteByte	; Write value to page 1
  296 FADC:E6 F8        		INC dest
  297 FADE:D0 **        		BNE .43
  298 FAE0:E6 F9        		INC dest+1
Epyx HandyAsm 1.12      monitor                         14-Apr-12500:40:40 Page    6
                                                        00:40:40  

  299 FAE2:88           .43		DEY
  300 FAE3:D0 F1        		BNE WriteRange
  301 FAE5:60           		RTS				; Until Y values have been written
  302                   
  303 FAE6:             ReadByte
  304 FAE6:20 ** **     		JSR ReadPage8	; Read from page 8
  305 FAE9:10 FB        		BPL ReadByte	; Wait for bit 7 on strobe
  306 FAEB:4C ** **     		JMP ReadPage9	; Read from page 9
  307                   
  308 FAEE:             WriteByte				; Write A to page 1, preserves A
  309 FAEE:48           		PHA
  310 FAEF:20 ** **     .44		JSR ReadPage8	; Read from page 8
  311 FAF2:10 FB        		BPL .44			; Wait for bit 7 on strobe
  312 FAF4:68           		PLA
  313 FAF5:4C ** **     		JMP WritePage1	; Write A to page 1 and return
  314                   
  315 FAF8:             BeginUpload
  316 FAF8:20 ** **     		JSR ReadPage8	; Read from page 8
  317 FAFB:29 40        		AND #$40
  318 FAFD:F0 F9        		BEQ BeginUpload	; Wait for strobe
  319 FAFF:20 ** **     		JSR Write0Page2	; Zero to page 2
  320 FB02:4C ** **     		JMP Write0Page7	; Zero to page 7 and return
  321                   
  322 FB05:             EndUpload
  323 FB05:20 ** **     		JSR ReadPage8	; Read from page 8
  324 FB08:10 FB        		BPL EndUpload	; Wait for bit 7 on strobe
  325 FB0A:20 ** **     		JSR Write0Page6	; Zero to page 6
  326 FB0D:4C ** **     		JMP Write0Page3	; Zero to page 3 and return
  327                   
  328 FB10:             InitComm ; Preserves A
  329 FB10:48           		PHA
  330 FB11:20 ** **     .52		JSR ReadPage8	; Read from page 8
  331 FB14:29 40        		AND #$40
  332 FB16:D0 F9        		BNE .52			; Wait for bit 6 on strobe
  333 FB18:20 ** **     		JSR Write0Page6	; Zero to page 6
  334 FB1B:20 ** **     		JSR Write0Page7	; Zero to page 7
  335 FB1E:20 ** **     .53		JSR ReadPage8	; Read from page 8
  336 FB21:29 40        		AND #$40		; Check if bit 6 was on strobe
  337 FB23:F0 F9        		BEQ .53			; Wait until strobe was received
  338 FB25:20 ** **     		JSR Write0Page6	; Zero to page 6
  339 FB28:20 ** **     		JSR Write0Page3	; Zero to page 3
  340 FB2B:68           		PLA
  341 FB2C:60           		RTS
  342                   
  343                   ; Write zero to page 6, 2, 7 or 3
  344 FB2D:             Write0Page6
  345 FB2D:A9 06        		LDA #$06
  346 FB2F:80 **        		BRA WriteCart1
  347 FB31:             Write0Page2
  348 FB31:A9 02        		LDA #$02
  349 FB33:80 **        		BRA WriteCart1
  350 FB35:             Write0Page7
  351 FB35:A9 07        		LDA #$07
  352 FB37:80 **        		BRA WriteCart1
  353 FB39:             Write0Page3
  354 FB39:A9 03        		LDA #$03
  355 FB3B:             WriteCart1
  356 FB3B:20 ** **     		JSR SetPage		; Set page number to 6, 2, 7 or 3
  357 FB3E:9C B3 FC     		STZ RCART_1		; Write zero to indicate ACK?
Epyx HandyAsm 1.12      monitor                         14-Apr-12500:40:40 Page    7
                                                        00:40:40  

  358 FB41:60           		RTS
  359                   
  360 FB42:             ReadPage8
  361 FB42:A9 08        		LDA #$08		; Set page number to #08 for strobe
  362 FB44:80 **        		BRA ReadCart1
  363 FB46:             ReadPage9
  364 FB46:A9 09        		LDA #$09
  365 FB48:             ReadCart1
  366 FB48:20 ** **     		JSR SetPage		; Set page number to #09 for data
  367 FB4B:AD B3 FC     		LDA RCART_1		; Read data from cart1 port
  368 FB4E:60           		RTS
  369                   
  370                   ; Write A to page 1, preserves A
  371 FB4F:             WritePage1
  372 FB4F:48           		PHA
  373 FB50:A9 01        		LDA #$01		; Set page number to #01 for output (?)
  374 FB52:20 ** **     		JSR SetPage
  375 FB55:68           		PLA
  376 FB56:8D B3 FC     		STA RCART_1
  377 FB59:60           		RTS
  378                   
  379 FB5A:             SetPage
  380 FB5A:DA           		PHX
  381 FB5B:5A           		PHY
  382 FB5C:AA           		TAX
  383 FB5D:A0 02        		LDY #POWERON	; Strobe to 0 and reset ripple counter
  384 FB5F:8C 87 FD     		STY SYSCTL1
  385 FB62:C8           		INY
  386 FB63:AD 8B FD     		LDA IODAT
  387 FB66:09 08        		ORA #RESTLESS
  388 FB68:8D 8B FD     		STA IODAT
  389 FB6B:AD ** **     		LDA IODIR_RAM
  390 FB6E:09 02        		ORA #CART_ADDR_DATA
  391 FB70:09 08        		ORA #RESTLESS
  392 FB72:8D 8A FD     		STA IODIR
  393 FB75:AD 8B FD     		LDA IODAT
  394 FB78:09 02        		ORA #CART_ADDR_DATA
  395 FB7A:09 08        		ORA #RESTLESS
  396 FB7C:8D ** **     		STA .fe
  397 FB7F:29 FD        		AND #~CART_ADDR_DATA
  398 FB81:09 08        		ORA #RESTLESS
  399 FB83:8D ** **     		STA .ff
  400 FB86:8A           		TXA
  401 FB87:38           		SEC
  402 FB88:2A           		ROL A
  403 FB89:90 **        .52		BCC .50
  404 FB8B:AE ** **     		LDX .fe
  405 FB8E:8E 8B FD     		STX IODAT
  406 FB91:80 **        		BRA .51
  407 FB93:AE ** **     .50		LDX .ff
  408 FB96:8E 8B FD     		STX IODAT
  409 FB99:8C 87 FD     .51		STY SYSCTL1
  410 FB9C:88           		DEY
  411 FB9D:8C 87 FD     		STY SYSCTL1
  412 FBA0:C8           		INY
  413 FBA1:0A           		ASL A
  414 FBA2:D0 E5        		BNE .52
  415 FBA4:A9 08        		LDA #RESTLESS
  416 FBA6:8D 8B FD     		STA IODAT
Epyx HandyAsm 1.12      monitor                         14-Apr-12500:40:40 Page    8
                                                        00:40:40  

  417 FBA9:7A           		PLY
  418 FBAA:FA           		PLX
  419 FBAB:60           		RTS
  420                   
  421 FBAC:             .fe			.DS 1
  422 FBAD:             .ff			.DS 1
  423 FBAE:             RunAddr		.DS 2			; FBAE-FBAF
  424                   
  425 FBB0:             REGISTERS:
  426 FBB0:             SaveA		.DS 1		; FBB0
  427 FBB1:             SaveX		.DS 1		; FBB1
  428 FBB2:             SaveY		.DS 1		; FBB2
  429 FBB3:             SaveSP		.DS 1		; FBB3
  430 FBB4:             SavePCHi	.DS 1		; FBB4
  431 FBB5:             SavePCLo	.DS 1		; FBB5
  432 FBB6:             SavePS		.DS 1		; FBB6
  433                   
  434 FBB7:             Unused		.DS 1		; FBB7
  435 FBB8:             MAPCTL_RAM	.DS 1		; FBB8
  436 FBB9:             VERSION		.DS 1		; Version number?
  437 FBBA:             IODAT_RAM	.DS 1		; FBBA - Unused
  438 FBBB:             IODIR_RAM	.DS 1		; FBBB
  439                   
  440                   * This code is called whenever a non-NMI interrupt occ
  441                   * interrupt or execution of a software BRK).
  442 FBBC:             UserIntHandler			; FBBC
  443 FBBC:48           		PHA
  444 FBBD:DA           		PHX
  445                   
  446                   		;-- Check if we got here because of a BRK instructio
  447                   		;-- the BRK routine if so, else branch to the interr
  448 FBBE:BA           		TSX
  449 FBBF:E8           		INX
  450 FBC0:E8           		INX
  451 FBC1:E8           		INX
  452 FBC2:BD 00 01     		LDA $0100,X		; Get a copy of the status byte
  453 FBC5:29 10        		AND #$10		; Check break bit
  454 FBC7:F0 **        		BEQ hardInt		; and branch if clear (hardware int)
  455                   
  456 FBC9:FA           		PLX
  457 FBCA:68           		PLA
  458 FBCB:4C 31 F9     		JMP NmiHandler	; Same as NMI vector
  459                   
  460 FBCE:             hardInt
  461                   		;------	We had a hardware interrupt.
  462                   		;------	Get the interrupt flags value, reset the bit
  463 FBCE:AD 81 FD     		LDA INTSET
  464 FBD1:8D 80 FD     		STA INTRST		; Clear all interrupts
  465 FBD4:A2 00        		LDX #$00		; Prepare IRQ jump table offset
  466 FBD6:89 01        .00		BIT #$01		; Check if interrupt was triggered
  467 FBD8:F0 **        		BEQ .01
  468 FBDA:20 ** **     		JSR jumpIntTable
  469 FBDD:4A           .01		LSR A			; Move to next interrupt
  470 FBDE:E8           		INX				; Advance IRQ jump table offset
  471 FBDF:E8           		INX
  472 FBE0:E0 0E        		CPX #$0E		; Verify if passing last entry in table
  473 FBE2:90 F2        		BCC .00			; Next iteration
  474                   
  475 FBE4:             IntReturn
Epyx HandyAsm 1.12      monitor                         14-Apr-12500:40:40 Page    9
                                                        00:40:40  

  476                   		;------	At end of interrupt processing, restore the
  477                   		;------	registers and return from interrupt
  478 FBE4:FA           		PLX
  479 FBE5:68           		PLA
  480 FBE6:40           		RTI
  481                   
  482 FBE7:             jumpIntTable
  483 FBE7:7C ** **     		JMP (interrupt_buffer,X) 		; Jump to handler for thi
  484                   
  485 FBEA:             		.ORG $FBEF
  486 FBEF:01           SuzyReadEnable		.BYTE 1		; FBEF
  487 FBF0:B9 F9 B9 F9  interrupt_buffer	.WORD IrqStub, IrqStub, IrqStub, IrqS
  487      B9 F9 B9 F9  
  487      B9 F9 B9 F9  
  487      B9 F9 B9 F9  
  487                   
Epyx HandyAsm 1.12      Symbols                         14-Apr-12500:40:40 Page   10
                                                        00:40:40  

$0040 ACCUMULATE                        $0040 ALGO_3
$0000 ASM.EQUSYMS                       $010C ASM.VERSION
$FD40 ATTENREG0                         $FD41 ATTENREG1
$FD42 ATTENREG2                         $FD43 ATTENREG3
$FD86 AUDIN                             $0010 AUDIN_BIT
$FD20 AUDIO0                            $FD28 AUDIO1
$FD30 AUDIO2                            $FD38 AUDIO3
$0000 AUD_1                             $0004 AUD_16
$0001 AUD_2                             $0005 AUD_32
$0002 AUD_4                             $0006 AUD_64
$0003 AUD_8                             $0004 AUD_BACKUP
$0007 AUD_CLOCK_MASK                    $0005 AUD_CONTROL
$0006 AUD_COUNTER                       $0001 AUD_FEEDBACK
$0007 AUD_LINKING                       $0007 AUD_OTHER
$0002 AUD_OUTPUT                        $0003 AUD_SHIFT
$0000 AUD_VOLCNTRL                      $0001 A_BUTTON
$0000 A_OFFSET                          $0000 BACKGROUND_SPRITE
$0001 BACKNONCOLL_SPRITE                $0000 BACK_SHADOW_SPRITE
$00C0 BITS_MASK                         $FDB0 BLUERED0
$FDB1 BLUERED1                          $FDB2 BLUERED2
$FDB3 BLUERED3                          $FDB4 BLUERED4
$FDB5 BLUERED5                          $FDB6 BLUERED6
$FDB7 BLUERED7                          $FDB8 BLUERED8
$FDB9 BLUERED9                          $FDBA BLUEREDA
$FDBB BLUEREDB                          $FDBC BLUEREDC
$FDBD BLUEREDD                          $FDBE BLUEREDE
$FDBF BLUEREDF                          $0002 BORROW_IN
$0001 BORROW_OUT                        $0003 BOUNDARY_SPRITE
$0015 BREAK_CONTROLS                    $0001 BRK_USER
$0002 BSHADOW_SPRITE                    $0013 BUS_MONITOR
$0002 B_BUTTON                          $FAF8 BeginUpload
$0002 CART0_IO_INACTIVE                 $0004 CART1_IO_INACTIVE
$0002 CART_ADDR_DATA                    $0001 CART_ADDR_STROBE
$0002 CART_POWER_OFF                    $FC0F COLLADRH
$FC0E COLLADRL                          $FC0B COLLBASH
$FC0A COLLBASL                          $FC25 COLLOFFH
$FC24 COLLOFFL                          $0003 CONTINUE_REQUEST
$FD91 CPUSLEEP                          $FFFE CPU_IRQ
$FFFA CPU_NMI                           $FFFC CPU_RESET
$0002 DATA                              $FD95 DISPADRH
$FD94 DISPADRL                          $FD92 DISPCTL
$1FE0 DISPLAY_BUFSIZE                   $0008 DISP_COLOR
$0002 DISP_FLIP                         $0004 DISP_FOURBIT
$0001 DMA_ENABLE                        $0001 DOWNLOAD_REQUEST
$0001 DRAW_LEFT                         $0002 DRAW_UP
$FA47 Done                              $F9BA Download
$0008 ENABLE_COUNT                      $0080 ENABLE_INT
$0020 ENABLE_INTEGRATE                  $0010 ENABLE_RELOAD
$0000 END_OF_FILE                       $0004 EVER_ON
$0001 EXTERNAL_POWER                    $FB05 EndUpload
$0080 FEEDBACK_7                        $0011 FILL_MEM
$0004 FLIP_BUTTON                       $00C0 FOUR_PER_PIXEL
$0004 FRAMERR                           $0005 GO_REQUEST
$FDA0 GREEN0                            $FDA1 GREEN1
$FDA2 GREEN2                            $FDA3 GREEN3
$FDA4 GREEN4                            $FDA5 GREEN5
$FDA6 GREEN6                            $FDA7 GREEN7
$FDA8 GREEN8                            $FDA9 GREEN9
Epyx HandyAsm 1.12      Symbols                         14-Apr-12500:40:40 Page   11
                                                        00:40:40  

$FDAA GREENA                            $FDAB GREENB
$FDAC GREENC                            $FDAD GREEND
$FDAE GREENE                            $FDAF GREENF
$FC00 HARDWARE_START                    $FD00 HCOUNT
$0020 HFLIP                             $0007 HIDE_HOWARD_REQUEST
$FC05 HOFFH                             $FC04 HOFFL
$0001 HORIZONTAL_INT                    $0016 HOWARD_ABUS
$0017 HOWARD_BBUS                       $0018 HOWARD_CBUS
$0019 HOWARD_DBUS                       $FCC4 HOWIE
$FC15 HPOSSTRTH                         $FC14 HPOSSTRTL
$FC29 HSIZOFFH                          $FC28 HSIZOFFL
$0002 INNER_BUTTON                      $FD80 INTRST
$FD81 INTSET                            $FD8B IODAT
$FBBA IODAT_RAM                         $FD8A IODIR
$FBBB IODIR_RAM                         $FCC3 IOData
$FCC2 IOStatus                          $FB10 InitComm
$FBE4 IntReturn                         $FBF0 IntTable
$F9B9 IrqStub                           $FCB0 JOYSTICK
$0080 JOY_DOWN                          $0010 JOY_LEFT
$0020 JOY_RIGHT                         $0040 JOY_UP
$0012 LARGE_DATA                        $0004 LAST_CLOCK
$FCC0 LEDS                              $0010 LEFT0_SELECT
$0020 LEFT1_SELECT                      $0040 LEFT2_SELECT
$0080 LEFT3_SELECT                      $0008 LEFTHAND
$0008 LEFTHANDED                        $00F0 LEFT_ATTENMASK
$0080 LITERAL                           $FFF9 MAPCTL
$FBB8 MAPCTL_RAM                        $FC55 MATHA
$FC54 MATHB                             $FC53 MATHC
$0020 MATHCARRY                         $FC52 MATHD
$FC63 MATHE                             $FC62 MATHF
$FC61 MATHG                             $FC60 MATHH
$FC6F MATHJ                             $FC6E MATHK
$FC6D MATHL                             $FC6C MATHM
$FC57 MATHN                             $FC56 MATHP
$0040 MATHWARNING                       $0080 MATHWORKING
$FD88 MIKEYHREV                         $FD89 MIKEYSREV
$FD00 MIKEY_BASE                        $0002 MIKEY_SPACE
$0010 MONITOR_BYTECOUNT                 $0001 MONITOR_I
$F900 MONITOR_RAM_RESERVED              $00F8 MONITOR_ZP_RESERVED
$FD44 MPAN                              $FD50 MSTEREO
$FD9C MTEST0                            $FD9D MTEST1
$FD9E MTEST2                            $F959 Main
$0004 NOEXP                             $0005 NONCOLL_SPRITE
$0000 NOP_REQUEST                       $0004 NORMAL_SPRITE
$0020 NO_COLLIDE                        $FA44 NextCommand
$F931 NmiHandler                        $0000 ONE_PER_PIXEL
$0008 OPTION1_BUTTON                    $0004 OPTION2_BUTTON
$0001 ORIGIN                            $0001 OUTER_BUTTON
$0008 OVERRUN                           $0001 PARBIT
$0010 PAREN                             $0010 PARERR
$0001 PAREVEN                           $0001 PAUSE_SWITCH
$FD93 PBKUP                             $0004 PC_OFFSET
$0002 POWERON                           $FC2F PROCADRH
$FC2E PROCADRL                          $0006 P_OFFSET
$FCB2 RCART_0                           $FCB3 RCART_1
$0010 READ_ENABLE                       $0010 REGISTER
$FBB0 REGISTERS                         $0007 REGISTER_BYTECOUNT
$0010 RELOAD_HV                         $0020 RELOAD_HVS
$0030 RELOAD_HVST                       $0030 RELOAD_MASK
Epyx HandyAsm 1.12      Symbols                         14-Apr-12500:40:40 Page   12
                                                        00:40:40  

$0000 RELOAD_NONE                       $0008 RESETERR
$0040 RESET_DONE                        $0008 RESTART_BUTTON
$0008 RESTLESS                          $0008 REUSE_PALETTE
$0001 RIGHT0_SELECT                     $0002 RIGHT1_SELECT
$0004 RIGHT2_SELECT                     $0008 RIGHT3_SELECT
$000F RIGHT_ATTENMASK                   $001A ROM
$0004 ROM_SPACE                         $0003 RUN_ADDRESS
$0002 RXBRK                             $0040 RXINTEN
$0040 RXRDY                             $FAC0 ReadAddress
$FAE6 ReadByte                          $FB48 ReadCart1
$FAAC ReadMemory                        $FB42 ReadPage8
$FB46 ReadPage9                         $FAC7 ReadRange
$FBAE RunAddr                           $FC2D SCBADRH
$FC2C SCBADRL                           $FC11 SCBNEXTH
$FC10 SCBNEXTL                          $FC23 SCVPOSH
$FC22 SCVPOSL                           $FD90 SDONEACK
$0006 SEE_HOWARD_REQUEST                $FD8C SERCTL
$FD8D SERDAT                            $FD10 SERIALRATE
$0010 SERIAL_INT                        $0007 SHADOW_SPRITE
$0080 SIGNMATH                          $0004 SKIP_SPRITE
$0004 SLAVE_REQUEST                     $FC82 SPRCOLL
$FC80 SPRCTL0                           $FC81 SPRCTL1
$FC13 SPRDLINEH                         $FC12 SPRDLINEL
$FC21 SPRDOFFH                          $FC20 SPRDOFFL
$FC91 SPRGO                             $FC19 SPRHSIZH
$FC18 SPRHSIZL                          $FC83 SPRINIT
$0002 SPRITESTOP                        $0002 SPRITETOSTOP
$0001 SPRITEWORKING                     $0001 SPRITE_GO
$FC92 SPRSYS                            $FC1B SPRVSIZH
$FC1A SPRVSIZL                          $FC1D STRETCHH
$FC1C STRETCHL                          $FC90 SUZYBUSEN
$FC88 SUZYHREV                          $FC89 SUZYSREV
$FC00 SUZY_BASE                         $0001 SUZY_SPACE
$FCB1 SWITCHES                          $FD87 SYSCTL1
$0003 S_OFFSET                          $FBB0 SaveA
$FBB4 SavePCHi                          $FBB5 SavePCLo
$FBB6 SavePS                            $FBB3 SaveSP
$FBB1 SaveX                             $FBB2 SaveY
$FB5A SetPage                           $FBEF SuzyReadEnable
$0080 THREE_PER_PIXEL                   $FC03 TILTACUMH
$FC02 TILTACUML                         $FC1F TILTH
$FC1E TILTL                             $FD00 TIMER0
$0001 TIMER0_INT                        $FD04 TIMER1
$0002 TIMER1_INT                        $FD08 TIMER2
$0004 TIMER2_INT                        $FD0C TIMER3
$0008 TIMER3_INT                        $FD10 TIMER4
$FD14 TIMER5                            $0020 TIMER5_INT
$FD18 TIMER6                            $0040 TIMER6_INT
$FD1C TIMER7                            $0080 TIMER7_INT
$0008 TIMER_DONE                        $0000 TIM_BACKUP
$0001 TIM_CONTROLA                      $0003 TIM_CONTROLB
$0002 TIM_COUNT                         $FC01 TMPADRH
$FC00 TMPADRL                           $0014 TRACE
$0080 TURBO_DISABLE                     $0040 TWO_PER_PIXEL
$0002 TXBRK                             $0020 TXEMPTY
$0080 TXINTEN                           $0004 TXOPEN
$0080 TXRDY                             $0004 UNSAFEACCESS
$0004 UNSAFEACCESSRST                   $0002 UPLOAD_REQUEST
$0002 UP_CURRENT_PAGE                   $0005 UP_HAHDATA
Epyx HandyAsm 1.12      Symbols                         14-Apr-12500:40:40 Page   13
                                                        00:40:40  

$0004 UP_MEMWATCH                       $0003 UP_REGISTERS
$0001 UP_THIS_PAGE                      $FBB7 Unused
$FA48 Upload                            $FAAB UploadDone
$FAA8 UploadNext                        $FBBC UserIntHandler
$FD08 VCOUNT                            $0008 VECTOR_SPACE
$FBB9 VERSION                           $0004 VERTICAL_INT
$0010 VFLIP                             $FC0D VIDADRH
$FC0C VIDADRL                           $FC09 VIDBASH
$FC08 VIDBASL                           $FC07 VOFFH
$FC06 VOFFL                             $FC17 VPOSSTRTH
$FC16 VPOSSTRTL                         $FC27 VSIZACUMH
$FC26 VSIZACUML                         $FC2B VSIZOFFH
$FC2A VSIZOFFL                          $0010 VSTRETCH
$0010 VSTRETCHING                       $FB31 Write0Page2
$FB39 Write0Page3                       $FB2D Write0Page6
$FB35 Write0Page7                       $FAEE WriteByte
$FB3B WriteCart1                        $FB4F WritePage1
$FAD6 WriteRange                        $0006 XOR_SHADOW_SPRITE
$0006 XOR_SPRITE                        $0001 X_OFFSET
$0002 Y_OFFSET                          $00F8 dest
$00FA dest_old                          $FBCE hardInt
$FBF0 interrupt_buffer                  $FBE7 jumpIntTable
