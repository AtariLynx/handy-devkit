* ===========================================================================

	.LIST OFF

		.IN 6502:include/harddefs.i
		.IN 6502:include/cart.i
		.IN 6502:include/monitor.i
		.IN 6502:macros/zpage.mac

	.LIST ON

LO				.EQ 0
HI				.EQ 1

				.ORG $1000
RCARTEN			.DS	2	; $1000		Primary and secondary memory access

				.ORG $1580
PORT_STATUS		.DS	1	; $1580
BUSY			.EQ %01000000
DATA_AVAILABLE	.EQ %10000000
PORT_DATA		.DS 1	; $1581
PORT_DIRECTION	.DS 1	; $1582
DIRECTION_INPUT			.EQ %10000000
DIRECTION_OUTPUT		.EQ %00000000
PORT_POUT		.DS 1	; $1583
POUT			.EQ %10000000

				.ORG $15D0
LDRADD			.DS 3		; $15D0-$15D2 ; 20 bits of cartridge address
ROMPAGE			.DS 1		; $15D3 Primary and secondary paging
PAGESIZE_4096	.EQ	%00000000
PAGESIZE_2048	.EQ	%00000001
PAGESIZE_1024	.EQ	%00000010
PAGESIZE_512	.EQ	%00000011
PAGESIZE_256	.EQ	%00000100
ROM_PAGING_MASK			.EQ	%00000111
PRIMARY_PAGING_MASK		.EQ	%00000111
SECONDARY_PAGING_MASK	.EQ	%00111000

				.ORG $15E0
SEGWR			.DS 1 		; $15E0
SEG				.EQ	%00000001	; 1 -> Remap 4000-7FFF in Handy RAM
								; 0 -> No remapping of Handy RAM 

* ===========================================================================

		.IN 6502:src/syszpage.src

BASE_ORG		.EQ $0200
NMI_ORG			.EQ $3000

		.ORG BASE_ORG

DirectMemory	.DS 1	; Non-zero bypasses memory protection of $FC00+
RunAddr			.DS 2		; $0201-$0202
Registers		.DS REGISTER_BYTECOUNT	; $0203-$0209
BusMonitor		.DS MONITOR_BYTECOUNT	; $020A-$0219	Monitor values
		.ORG BASE_ORG+$1E
VERSION			.DS 1		; $021E
		.ORG BASE_ORG+$20
HowardEnabled	.DS 1		; $0220:		Howard board enabled (0 = No, 1 = Yes)
CartRegister	.DS	3		; $0221-$0223:	24-bit counter (inverted data)
PrimaryRomSize	.DS 1		; $0224
SecondaryRomSize	.DS 1	; $0225
ROMPAGE_RAM		.DS 1 		; $0226: 		Shadow register to ROMPAGE
RomSizeTemp		.DS 1		; $0227

* ===========================================================================

		.ORG NMI_ORG
		.RUN *

NmiHandler	; $3000
		CLD
		STA Registers+A_OFFSET 			; Store accumulator, X and Y register for transfer
		STX Registers+X_OFFSET
		STY Registers+Y_OFFSET
		PLA 				; Get status, low and high return address from stack
		PLX
		PLY
		STA Registers+P_OFFSET			; Store for inspection
		STX Registers+PC_OFFSET+LO
		STY Registers+PC_OFFSET+HI
		TSX					; Store stack pointer 
		STX Registers+S_OFFSET

; Silence all audio channels	$301A
		STZ AUDIO0+AUD_VOLCNTRL
		STZ AUDIO1+AUD_VOLCNTRL
		STZ AUDIO2+AUD_VOLCNTRL
		STZ AUDIO3+AUD_VOLCNTRL

; $3026
		JSR InitComm		; $32C7

Main	; $3029
		JSR ReceiveByte		; Read byte from parallel port

		CMP #DOWNLOAD_REQUEST ; Control command: 01 means "Download"
		BNE .2	
		JSR Download		; Control loop for downloading files from Handebug to Howard
		BRA Main			; Next command

; $3035
.2		CMP #UPLOAD_REQUEST	; Control command: 02 means "Upload"
		BNE .5
		JSR Upload			; Control loop for uploading data from Howard to Handebug
		BRA Main			; Next command

.5		CMP #GO_REQUEST		; Control command: 05 means "Go"
		BNE .3				; Check whether to return from NMI
		LDA #TXOPEN			; Turn off serial IRQs before starting
		STA SERCTL			; and make sure serial port is open-collector
		BRA .9

; $3049
.3		CMP #CONTINUE_REQUEST
		BNE .4

; Restore all previous values and return from NMI handler
.9		LDX Registers+S_OFFSET		; Restore stack pointer
		TXS
		LDA Registers+S_OFFSET+HI	; $0208
		PHA
		LDA Registers+S_OFFSET+LO	; $0207
		PHA
		LDA Registers+P_OFFSET		; $0209
		PHA
		LDA Registers+A_OFFSET		; Load stored values for A, X, Y 
		LDX Registers+X_OFFSET
		LDY Registers+Y_OFFSET
		RTI

; $3067
.4		CMP #SLAVE_REQUEST
		BNE .6
		JSR BeginUpload
		LDA #$00
		JSR SendByte		; Zero (A) to page 1
		JSR EndUpload
		JMP Main			; Next control command

; $3079
.6		CMP #SEE_HOWARD_REQUEST
		BNE .7
		LDA #$01
		STA HowardEnabled
		STZ SEGWR			; No remapping of Handy RAM
		JMP Main

; #3088
.7		CMP #HIDE_HOWARD_REQUEST
		BNE .8
		STZ HowardEnabled
		JMP Main

; $3092
.8		JMP Main			; Next control command

; Control loop for downloading from Handebug to Howard
Download
; $3095
		JSR ReceiveByte

; $3098
		CMP #END_OF_FILE	 ; End of .bin file
		BNE .11
		JMP Done

; $309F
.11		CMP #ORIGIN			; Receive load address (1)
		BNE .12
		JSR ReceiveWord 	; Read address from parallel port to X and A
		STX sysptr+LO
		STA sysptr+HI
		BRA Download

; $30AC
.12		CMP #DATA			; Load data of max 1-255 bytes (2)
		BNE .13
		JSR ReceiveByte		; Read byte from parallel port 
		JSR ReceiveByte		; and another one, discarding first (potentially unused checksum)
		TAY
		JSR ReadRange		; Read Y number of bytes and store in ($00) ; $31CB
		BRA Download

.13		CMP #RUN_ADDRESS	; Receive run address (3)
		BNE .14
		JSR ReceiveWord 	; Read two bytes to X and A
		STX RunAddr			; Store in a special place
		STA RunAddr+1
		BRA Download

; 30CB
.14		CMP #REGISTER		; Read registers from Amiga/PC
		BNE .15
		LDA #<Registers
		STA sysptr+LO
		LDA #>Registers
		STA sysptr+HI
		LDY #REGISTER_BYTECOUNT	; Send 7 bytes from $0203 and up
		JSR ReceiveHoward
		BRA Download

; $30DE
.15		CMP #FILL_MEM		; Fill Range with value: 11 Value Lo Hi Count
		BNE .16
		JSR ReceiveByte		; Read fill value
		PHA
		JSR ReceiveWord		; Read destination address
		STX sysptr+LO
		STA sysptr+HI
		JSR ReceiveByte		; Read count
		TAY
		LDA HowardEnabled	; Is Howard board enabled?
		BNE .28
		JSR MapMemory		; Remap memory address
		PLA
.20		STA (sysptr2+LO)	; Store at remapped address
		INC sysptr2+LO
		BNE .21
		STZ sysptr+LO
		INC sysptr+HI
		PHA					; Crossing page boundary, so remap
		JSR MapMemory
		PLA					; Restore fill value 
.21		DEY
		BNE .20
		JMP Download

; $310F	Read when Howard board is enabled?
.28
		PLA					; Restore fill value
.23
		STA (sysptr+LO)		; Addresses when Howard is visible are unaltered
		INC sysptr+LO
		BNE .22
		INC sysptr+HI

.22		DEY
		BNE .23
		JMP Download

; $311E
.16
		CMP #BUS_MONITOR
		BNE .17
		LDA #<BusMonitor
		STA sysptr+LO
		LDA #>BusMonitor
		STA sysptr+HI
		LDY #MONITOR_BYTECOUNT
		JSR ReceiveHoward
		JMP Download

; $3132
.17		CMP #LARGE_DATA
		BNE .18
		JSR ReceiveWord		; Read length
		JSR $31FA			; Handle large data routine
		JMP Download

; 313F
.18		CMP #ROM
		BNE .19
		JSR $32F9
		JSR DownloadROM
		JMP Download
; $314C
.19
		JMP Download
; $314F
Done
		RTS

; $3150
Upload
		JSR ReceiveByte
		CMP #END_OF_FILE
		BNE .31
		JMP UploadDone

; $315A
.31		CMP #ORIGIN
		BNE .32
		JSR ReceiveWord
		STX sysptr+LO
		STA sysptr+HI
		BRA Upload

; $3167
.32		CMP #DATA
		BNE .33
		JSR ReceiveByte
		TAY
		LDA sysptr+LO
		STA sysptr3+LO
		LDA sysptr+HI
		STA sysptr3+HI
		JSR BeginUpload
		LDA #DATA
		JSR SendByte
		LDA VERSION			; Similar to $FBB9 in monitor.src
		JSR SendByte
		TYA
		JSR SendByte		; Length
		JSR SendRange
		JSR EndUpload
		BRA Upload

; $3191
.33		CMP #REGISTER
		BNE .34
		LDA #<Registers
		STA sysptr+LO
		LDA #>Registers
		STA sysptr+HI
		LDY #REGISTER_BYTECOUNT
		JSR BeginUpload
		LDA #REGISTER
		JSR SendByte
		JSR SendRangeCore
		JSR EndUpload
		BRA Upload

; $31AF
.34		CMP #TRACE
		BNE .35
		BRA Upload

; $31B5
.35		CMP #ROM
		BNE .36
		JSR $32F9
		JSR UploadROM
		BRA Upload

; $31C1
.36							; Unrecognized upload type
		BRA Upload

; $31C3
UploadDone
		RTS

; $31C4
ReceiveWord
		JSR ReceiveByte
		TAX
		JMP ReceiveByte

; $31CB
ReadRange
		LDA HowardEnabled
		BNE ReceiveHoward
		JSR MapMemory
.38		JSR ReceiveByte
		STA (sysptr2+LO)
		INC sysptr2+LO
		BNE .37
		STZ sysptr+LO
		INC sysptr+HI		; Page boundary crossed, so remap memory
		JSR MapMemory
.37		DEY
		BNE .38
		LDA sysptr2+LO
		STA sysptr+LO
		RTS

; $31EB
ReceiveHoward	; Register Y is number of bytes to read
.39		JSR ReceiveByte
		STA (sysptr+LO)
		INC sysptr+LO
		BNE .3A
		INC sysptr+HI
.3A		DEY
		BNE ReceiveHoward
		RTS

; $31FA
; Large data handling routine
		LDY HowardEnabled
		BNE .43
		TAY
		TXA
		BEQ .40
		INY
.40		JSR MapMemory
.41		JSR ReceiveByte
		STA (sysptr2+LO)
		INC sysptr2+LO
		BNE .42
		STZ sysptr+LO
		INC sysptr+HI
		JSR MapMemory
.42		DEX
		BNE .41
		DEY
		BNE .41
		LDA sysptr2+LO
		STA sysptr+LO
		RTS

; $3222		Howard board is enabled
.43		TAY
		TXA
		BEQ .44
		INY
.44		JSR ReceiveByte
		STA (sysptr+LO)
		INC sysptr+LO
		BNE .45
		INC sysptr+HI
.45		DEX
		BNE .44
		DEY
		BNE .44
		RTS

; $3239
SendRange
		LDA HowardEnabled
		BNE SendRangeCore
		JSR MapMemory
.50		JSR ReadMemory
		JSR SendByte
		INC sysptr2+LO
		BNE .51
		STZ sysptr+LO
		INC sysptr+HI
		JSR MapMemory
; $3252
.51		DEY
		BNE .50
		LDA sysptr2+LO
		STA sysptr+LO
		RTS

; $325A
SendRangeCore
		LDA sysptr+LO
		STA sysptr2+LO
		LDA sysptr+HI
		STA sysptr2+HI
.53		JSR ReadMemory
		JSR SendByte
		INC sysptr2+LO
		BNE .52
		INC sysptr2+HI
		INC sysptr+HI
; $3270
.52		DEY
		BNE .53
		LDA sysptr2+LO
		STA sysptr+LO
		RTS

; $3278
; Memory mapping function from sysptr to sysptr2
MapMemory
		LDA sysptr+LO
		STA sysptr2+LO
		LDA sysptr+HI
		BMI .55				; Normal memory for $8000 and higher
		CMP #$40
		BCS .54				; Skip when sysptr+HI is $40-$7F
		PHY
		LDY #SEG
		STY SEGWR			; Remap $0000-$3FFF to $4000-$7FFF in Handy RAM
		PLY
		ORA #$40			; Adjust address to range
		BRA .55
.54
		STZ SEGWR			; No remapping of Handy RAM
.55		STA sysptr2+HI
		RTS

; $3295
ReceiveByte
		LDA PORT_STATUS
		BPL ReceiveByte		; "When receiving data, DATA AVAILABLE goes HI when data has been received."
		LDA PORT_DATA
		RTS

; $329E
SendByte
		PHA
.60		LDA PORT_STATUS
		BPL .60				; "When sending data, DATA AVAILABLE goes LOW until the Amiga acknowledges the transfer."
		PLA
		STA PORT_DATA
		RTS

; $32A9
BeginUpload
		LDA PORT_STATUS
		AND #BUSY
		BEQ BeginUpload
		STZ PORT_DIRECTION	; Port direction to output
		LDA #POUT
		STA PORT_POUT		; Pout on?
		RTS

; $32B9
EndUpload
		LDA PORT_STATUS
		BPL EndUpload
		LDA #DIRECTION_INPUT
		STA PORT_DIRECTION
		STZ PORT_POUT		; Pout off? 
		RTS

; $32C7
InitComm
		PHA
.61		LDA PORT_STATUS
		AND #BUSY
		BNE .61
		LDA #DIRECTION_INPUT
		STA PORT_DIRECTION
		STA PORT_POUT		; Lock for read?
.62		LDA PORT_STATUS
		AND #BUSY
		BEQ .62
		STZ PORT_POUT
		PLA
		RTS

; $32E3
ReadMemory
		LDA DirectMemory
		BNE .63
		LDA sysptr2+HI
		CMP #>SUZY_BASE		; Memory range below Suzy ($FC00) is safe
		BNE .63
		LDA sysptr2+LO 
		BPL .64
		CMP #$84			; Do nothing for $FC84 and below (Unallocated address in Suzy)
		BCC .64
.63 	LDA (sysptr2+LO)
.64 	RTS

; $32F9		; Prepares ROM access
		JSR ReceiveWord
		STX LDRADD
		STA LDRADD+1
		JSR ReceiveByte
		STA LDRADD+2		; 20-bit address for cartridge
		JSR ReceiveByte		; Length to read LSB first to MSB last
		EOR #$FF			; EXOR'ed to count up
		STA CartRegister		
		JSR ReceiveByte
		EOR #$FF
		STA CartRegister+1
		JSR ReceiveByte		; MSB of address
		EOR #$FF
		STA CartRegister+2
		JSR ReceiveByte		; ???
		TAX
		BMI .80
		AND #ROM_PAGING_MASK	; Page size is 3 bits (see ROMPAGE)
		STA PrimaryRomSize		; ROM primary memory paging
		LDA #<RCARTEN
		STA sysptr3+LO
		LDA #>RCARTEN
		STA sysptr3+HI
		BRA .81

; $3335
.80		AND #ROM_PAGING_MASK
		STA SecondaryRomSize	; ROM secondary memory paging
		LDA #<RCARTEN+1
		STA sysptr3+LO
		LDA #>RCARTEN
		STA sysptr3+HI

; $3342
.81		LDA PrimaryRomSize
		AND #ROM_PAGING_MASK
		STA RomSizeTemp 
		LDA SecondaryRomSize	; Secondary paging is at bits 3-5
		AND #ROM_PAGING_MASK	; Mask to make sure it is within 3 bits
		ASL
		ASL
		ASL					; Shift to bits 3-5
		ORA RomSizeTemp		; Combine with primary paging
		STA ROMPAGE			; Set resulting ROM primary and secondary paging
		STA ROMPAGE_RAM		; ROMPAGE_RAM Shadow address
		RTS

; $335C
DownloadROM
		STZ ROMPAGE 		; "Before accessing memory through this register, the page size should be set to 4096 (full - size)"
.83
		INC CartRegister	; Least significant byte of address
		BNE .82				; Receive byte and write to ROM 
		INC CartRegister+1
		BNE .82
		INC CartRegister+2	; Most significant
		BNE .82		
		LDA ROMPAGE_RAM
		STA ROMPAGE			; Restore original ROM paging, as reading is finished
		RTS
		
.82		JSR ReceiveByte
		STA (sysptr3+LO)	; Write address of current ROM section
		BRA .83

; $337C
UploadROM
		JSR BeginUpload		; Uploading of ROM content
		LDA HowardEnabled
		BNE .84				; If Howard is visible, 
		STZ ROMPAGE			; "Before accessing memory through this register, the page size should be set to 4096 (full - size)"
.84		INC CartRegister			
		BNE .85
		INC CartRegister+1
		BNE .85
		INC CartRegister+2
		BNE .85
		LDA ROMPAGE_RAM
		STA ROMPAGE
		JSR EndUpload
		RTS

; $33A0
.85
		LDA (sysptr3+LO) 
		JSR SendByte
		BRA .84
